{"version":3,"file":"src_worker_js.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAA0B;AACkC;AAC5B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,6CAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8DAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;AChFvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;ACZpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAwD;AACtF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;AC9MA;AAC4B;AACtB;AAChC;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8DAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;ACrE4B;AAC8C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA,yBAAyB,4EAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;ACvCO;AACM;AACA;AACF;AACpC;AACA,qBAAqB,mDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gEAAuB;AACnE;AACA;AACA,kDAAkD,iEAAwB;AAC1E,wDAAwD,iEAAwB;AAChF,kEAAkE,8DAAqB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;AC9FsE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAgiEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCjIvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN8C;AAC9C;AACA;AACA;AACA;AACA,iBAAiB,6EAAoB;AACrC;AACA;AACA","sources":["webpack://mwicombatsimulator/./src/combatsimulator/ability.js","webpack://mwicombatsimulator/./src/combatsimulator/buff.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUnit.js","webpack://mwicombatsimulator/./src/combatsimulator/consumable.js","webpack://mwicombatsimulator/./src/combatsimulator/equipment.js","webpack://mwicombatsimulator/./src/combatsimulator/player.js","webpack://mwicombatsimulator/./src/combatsimulator/trigger.js","webpack://mwicombatsimulator/webpack/bootstrap","webpack://mwicombatsimulator/webpack/runtime/define property getters","webpack://mwicombatsimulator/webpack/runtime/hasOwnProperty shorthand","webpack://mwicombatsimulator/webpack/runtime/make namespace object","webpack://mwicombatsimulator/./src/worker.js"],"sourcesContent":["import Buff from \"./buff\";\r\nimport abilityDetailMap from \"./data/abilityDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Ability {\r\n    constructor(hrid, level, triggers = null) {\r\n        this.hrid = hrid;\r\n        this.level = level;\r\n\r\n        let gameAbility = abilityDetailMap[hrid];\r\n        console.assert(gameAbility, \"No ability found for hrid:\" + this.hrid);\r\n\r\n        this.manaCost = gameAbility.manaCost;\r\n        this.cooldownDuration = gameAbility.cooldownDuration;\r\n\r\n        this.abilityEffects = [];\r\n\r\n        for (const effect of gameAbility.abilityEffects) {\r\n            let abilityEffect = {\r\n                targetType: effect.targetType,\r\n                effectType: effect.effectType,\r\n                combatStyleHrid: effect.combatStyleHrid.slice(effect.combatStyleHrid.lastIndexOf(\"/\") + 1),\r\n                damageFlat: effect.baseDamageFlat + (this.level - 1) * effect.baseDamageFlatLevelBonus,\r\n                damageRatio: effect.baseDamageRatio + (this.level - 1) * effect.baseDamageRatioLevelBonus,\r\n                bleedRatio: effect.bleedRatio,\r\n                duration: effect.duration,\r\n                buff: effect.buff.duration > 0 ? new Buff(effect.buff, this.level) : null,\r\n            };\r\n            this.abilityEffects.push(abilityEffect);\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameAbility.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let triggers = dto.triggers.map(trigger => Trigger.createFromDTO(trigger));\r\n        let ability = new Ability(dto.hrid, dto.level, triggers);\r\n\r\n        return ability;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (source.combatStats.currentManapoints < this.manaCost) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Ability;\r\n","class Buff {\r\n    startTime;\r\n\r\n    constructor(buff, level = 1) {\r\n        this.sourceHrid = buff.sourceHrid;\r\n        this.typeHrid = buff.typeHrid;\r\n        this.ratioBoost = buff.ratioBoost + (level - 1) * buff.ratioBoostLevelBonus;\r\n        this.flatBoost = buff.flatBoost + (level - 1) * buff.flatBoostLevelBonus;\r\n        this.duration = buff.duration;\r\n    }\r\n}\r\n\r\nexport default Buff;\r\n","class CombatUnit {\r\n    isPlayer;\r\n\r\n    // Base levels which don't change after initialization\r\n    staminaLevel = 1;\r\n    intelligenceLevel = 1;\r\n    attackLevel = 1;\r\n    powerLevel = 1;\r\n    defenseLevel = 1;\r\n\r\n    abilities = [null, null, null, null];\r\n    food = [null, null, null];\r\n    drinks = [null, null, null];\r\n\r\n    // Calculated combat stats including temporary buffs\r\n    combatStats = {\r\n        combatStyleHrid: \"smash\",\r\n        attackInterval: 3000000000,\r\n        stabAccuracy: 0,\r\n        slashAccuracy: 0,\r\n        smashAccuracy: 0,\r\n        stabDamage: 0,\r\n        slashDamage: 0,\r\n        smashDamage: 0,\r\n        stabEvasion: 0,\r\n        slashEvasion: 0,\r\n        smashEvasion: 0,\r\n        armor: 0,\r\n        lifeSteal: 0,\r\n        HPRegen: 0.005,\r\n        MPRegen: 0.01,\r\n        dropRate: 0,\r\n        foodSlots: 1,\r\n        drinkSlots: 0,\r\n        staminaLevel: 1,\r\n        intelligenceLevel: 1,\r\n        attackLevel: 1,\r\n        powerLevel: 1,\r\n        defenseLevel: 1,\r\n        maxHitpoints: 110,\r\n        currentHitpoints: 110,\r\n        maxManapoints: 110,\r\n        currentManapoints: 110,\r\n        stabAccuracyRating: 11,\r\n        slashAccuracyRating: 11,\r\n        smashAccuracyRating: 11,\r\n        stabMaxDamage: 11,\r\n        slashMaxDamage: 11,\r\n        smashMaxDamage: 11,\r\n        stabEvasionRating: 11,\r\n        slashEvasionRating: 11,\r\n        smashEvasionRating: 11,\r\n    };\r\n    combatBuffs = {};\r\n\r\n    constructor() {}\r\n\r\n    updateCombatStats() {\r\n        [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((stat) => {\r\n            this.combatStats[stat + \"Level\"] = this[stat + \"Level\"];\r\n            let boosts = this.getBuffBoosts(\"/buff_types/\" + stat + \"_level\");\r\n            boosts.forEach((buff) => {\r\n                this.combatStats[stat + \"Level\"] += Math.floor(this[stat + \"Level\"] * buff.ratioBoost);\r\n                this.combatStats[stat + \"Level\"] += buff.flatBoost;\r\n            });\r\n        });\r\n\r\n        this.combatStats.maxHitpoints = 10 * (10 + this.combatStats.staminaLevel);\r\n        this.combatStats.maxManapoints = 10 * (10 + this.combatStats.intelligenceLevel);\r\n\r\n        let accuracyBoosts = this.getBuffBoosts(\"/buff_types/accuracy\");\r\n        let accuracyRatioBoost = accuracyBoosts[0]?.ratioBoost ?? 0;\r\n        console.assert(accuracyBoosts.length <= 1, \"Multiple accuracy buffs active\");\r\n\r\n        let damageBoosts = this.getBuffBoosts(\"/buff_types/damage\");\r\n        let damageRatioBoost = damageBoosts[0]?.ratioBoost ?? 0;\r\n        console.assert(damageBoosts.length <= 1, \"Multiple damage buffs active\");\r\n\r\n        [\"stab\", \"slash\", \"smash\"].forEach((style) => {\r\n            this.combatStats[style + \"AccuracyRating\"] =\r\n                (10 + this.combatStats.attackLevel) *\r\n                (1 + this.combatStats[style + \"Accuracy\"]) *\r\n                (1 + accuracyRatioBoost);\r\n            this.combatStats[style + \"MaxDamage\"] =\r\n                (10 + this.combatStats.powerLevel) * (1 + this.combatStats[style + \"Damage\"]) * (1 + damageRatioBoost);\r\n            this.combatStats[style + \"EvasionRating\"] =\r\n                (10 + this.combatStats.defenseLevel) * (1 + this.combatStats[style + \"Evasion\"]);\r\n        });\r\n\r\n        // TODO: Test how frenzy and swiftness coffee stack\r\n        let attackIntervalBoosts = this.getBuffBoosts(\"/buff_types/attack_speed\");\r\n        let attackIntervalRatioBoost = attackIntervalBoosts\r\n            .map((boost) => boost.ratioBoost)\r\n            .reduce((prev, cur) => prev + cur, 0);\r\n        this.combatStats.attackInterval = this.combatStats.attackInterval * (1 / (1 + attackIntervalRatioBoost));\r\n\r\n        let armorBoosts = this.getBuffBoosts(\"/buff_types/armor\");\r\n        let armorFlatBoost = armorBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.armor += armorFlatBoost;\r\n        console.assert(armorBoosts.length <= 1, \"Multiple armor buffs active\");\r\n\r\n        let lifeStealBoosts = this.getBuffBoosts(\"/buff_types/life_steal\");\r\n        let lifeStealFlatBoost = lifeStealBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.lifeSteal += lifeStealFlatBoost;\r\n        console.assert(lifeStealBoosts.length <= 1, \"Multiple life steal buffs active\");\r\n\r\n        let HPRegenBoosts = this.getBuffBoosts(\"/buff_types/hp_regen\");\r\n        let HPRegenFlatBoost = HPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.HPRegen += HPRegenFlatBoost;\r\n        console.assert(HPRegenBoosts.length <= 1, \"Multiple hp regen buffs active\");\r\n\r\n        let MPRegenBoosts = this.getBuffBoosts(\"/buff_types/mp_regen\");\r\n        let MPRegenFlatBoost = MPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.MPRegen += MPRegenFlatBoost;\r\n        console.assert(MPRegenBoosts.length <= 1, \"Multiple mp regen buffs active\");\r\n\r\n        let dropRateBoosts = this.getBuffBoosts(\"/buff_types/combat_drop_rate\");\r\n        let dropRateRatioBoost = dropRateBoosts[0]?.ratioBoost ?? 0;\r\n        this.combatStats.dropRate += dropRateRatioBoost;\r\n        console.assert(dropRateBoosts.length <= 1, \"Multiple drop rate buffs active\");\r\n    }\r\n\r\n    addBuff(buff, currentTime) {\r\n        buff.startTime = currentTime;\r\n        this.combatBuffs[buff.sourceHrid] = buff;\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    removeExpiredBuffs(currentTime) {\r\n        let expiredBuffs = Object.values(this.combatBuffs).filter(\r\n            (buff) => buff.startTime + buff.duration <= currentTime\r\n        );\r\n        expiredBuffs.forEach((buff) => {\r\n            delete this.combatBuffs[buff.sourceHrid];\r\n        });\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    clearBuffs() {\r\n        this.combatBuffs = {};\r\n    }\r\n\r\n    getBuffBoosts(type) {\r\n        let boosts = [];\r\n        Object.values(this.combatBuffs)\r\n            .filter((buff) => buff.typeHrid == type)\r\n            .forEach((buff) => {\r\n                boosts.push({ ratioBoost: buff.ratioBoost, flatBoost: buff.flatBoost });\r\n            });\r\n\r\n        return boosts;\r\n    }\r\n\r\n    reset(currentTime = 0) {\r\n        this.clearBuffs();\r\n        this.updateCombatStats();\r\n        this.resetCooldowns(currentTime);\r\n\r\n        this.combatStats.currentHitpoints = this.combatStats.maxHitpoints;\r\n        this.combatStats.currentManapoints = this.combatStats.maxManapoints;\r\n    }\r\n\r\n    resetCooldowns(currentTime = 0) {\r\n        this.food.filter((food) => food != null).forEach((food) => food.lastUsed = Number.MIN_SAFE_INTEGER);\r\n        this.drinks.filter((drink) => drink != null).forEach((drink) => drink.lastUsed = Number.MIN_SAFE_INTEGER);\r\n\r\n        this.abilities.filter((ability) => ability != null).forEach((ability) => {\r\n            if (this.isPlayer) {\r\n                ability.lastUsed = currentTime;\r\n            } else {\r\n                ability.lastUsed = currentTime - Math.floor(Math.random() * ability.cooldownDuration);\r\n            }\r\n        })\r\n    }\r\n\r\n    addHitpoints(hitpoints) {\r\n        let hitpointsAdded = 0;\r\n\r\n        if (this.combatStats.currentHitpoints >= this.combatStats.maxHitpoints) {\r\n            return hitpointsAdded;\r\n        }\r\n\r\n        let newHitpoints = Math.min(this.combatStats.currentHitpoints + hitpoints, this.combatStats.maxHitpoints);\r\n        hitpointsAdded = newHitpoints - this.combatStats.currentHitpoints;\r\n        this.combatStats.currentHitpoints = newHitpoints;\r\n\r\n        return hitpointsAdded;\r\n    }\r\n\r\n    addManapoints(manapoints) {\r\n        let manapointsAdded = 0;\r\n\r\n        if (this.combatStats.currentManapoints >= this.combatStats.maxManapoints) {\r\n            return manapointsAdded;\r\n        }\r\n\r\n        let newManapoints = Math.min(this.combatStats.currentManapoints + manapoints, this.combatStats.maxManapoints);\r\n        manapointsAdded = newManapoints - this.combatStats.currentManapoints;\r\n        this.combatStats.currentManapoints = newManapoints;\r\n\r\n        return manapointsAdded;\r\n    }\r\n}\r\n\r\nexport default CombatUnit;\r\n","import Buff from \"./buff\";\r\nimport itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Consumable {\r\n    constructor(hrid, triggers = null) {\r\n        this.hrid = hrid;\r\n\r\n        let gameConsumable = itemDetailMap[this.hrid];\r\n        console.assert(gameConsumable, \"No consumable found for hrid:\" + this.hrid);\r\n\r\n        this.cooldownDuration = gameConsumable.consumableDetail.cooldownDuration;\r\n        this.hitpointRestore = gameConsumable.consumableDetail.hitpointRestore;\r\n        this.manapointRestore = gameConsumable.consumableDetail.manapointRestore;\r\n        this.recoveryDuration = gameConsumable.consumableDetail.recoveryDuration;\r\n\r\n        this.buffs = [];\r\n        if (gameConsumable.consumableDetail.buffs) {\r\n            for (const consumableBuff of gameConsumable.consumableDetail.buffs) {\r\n                let buff = new Buff(consumableBuff);\r\n                this.buffs.push(buff);\r\n            }\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameConsumable.consumableDetail.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let triggers = dto.triggers.map(trigger => Trigger.createFromDTO(trigger));\r\n        let consumable = new Consumable(dto.hrid, triggers);\r\n\r\n        return consumable;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Consumable;\r\n","import itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport enhancementLevelTotalMultiplierTable from \"./data/enhancementLevelTotalMultiplierTable.json\";\r\n\r\nclass Equipment {\r\n    constructor(hrid, enhancementLevel) {\r\n        this.hrid = hrid;\r\n        this.enhancementLevel = enhancementLevel;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let equipment = new Equipment(dto.hrid, dto.enhancementLevel);\r\n\r\n        return equipment;\r\n    }\r\n\r\n    getCombatStat(combatStat) {\r\n        let gameItem = itemDetailMap[this.hrid];\r\n        console.assert(gameItem, \"No equipment found for hrid:\" + this.hrid);\r\n\r\n        let multiplier = enhancementLevelTotalMultiplierTable[this.enhancementLevel];\r\n\r\n        let stat =\r\n            gameItem.equipmentDetail.combatStats[combatStat] +\r\n            multiplier * gameItem.equipmentDetail.combatEnhancementBonuses[combatStat];\r\n\r\n        return stat;\r\n    }\r\n\r\n    getCombatStyle() {\r\n        let gameItem = itemDetailMap[this.hrid];\r\n        console.assert(gameItem, \"No equipment found for hrid:\" + this.hrid);\r\n\r\n        let gameCombatStyle = gameItem.equipmentDetail.combatStyleHrids[0];\r\n        let combatStyle = gameCombatStyle.slice(gameCombatStyle.lastIndexOf(\"/\") + 1);\r\n\r\n        return combatStyle;\r\n    }\r\n}\r\n\r\nexport default Equipment;\r\n","import Ability from \"./ability\";\r\nimport CombatUnit from \"./combatUnit\";\r\nimport Consumable from \"./consumable\";\r\nimport Equipment from \"./equipment\";\r\n\r\nclass Player extends CombatUnit {\r\n    equipment = {\r\n        \"/equipment_types/head\": null,\r\n        \"/equipment_types/body\": null,\r\n        \"/equipment_types/legs\": null,\r\n        \"/equipment_types/feet\": null,\r\n        \"/equipment_types/hands\": null,\r\n        \"/equipment_types/main_hand\": null,\r\n        \"/equipment_types/two_hand\": null,\r\n        \"/equipment_types/off_hand\": null,\r\n        \"/equipment_types/pouch\": null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.isPlayer = true;\r\n        this.hrid = \"player\";\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let player = new Player();\r\n\r\n        player.staminaLevel = dto.staminaLevel;\r\n        player.intelligenceLevel = dto.intelligenceLevel;\r\n        player.attackLevel = dto.attackLevel;\r\n        player.powerLevel = dto.powerLevel;\r\n        player.defenseLevel = dto.defenseLevel;\r\n\r\n        for (const [key, value] of Object.entries(dto.equipment)) {\r\n            player.equipment[key] = value ? Equipment.createFromDTO(value) : null;\r\n        }\r\n\r\n        player.food = dto.food.map(food => food ? Consumable.createFromDTO(food) : null);\r\n        player.drinks = dto.drinks.map(drink => drink ? Consumable.createFromDTO(drink) : null);\r\n        player.abilities = dto.abilities.map(ability => ability ? Ability.createFromDTO(ability) : null);\r\n\r\n        return player;\r\n    }\r\n\r\n    updateCombatStats() {\r\n        if (this.equipment[\"/equipment_types/main_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/main_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStat(\"attackInterval\");\r\n        } else if (this.equipment[\"/equipment_types/two_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/two_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStat(\"attackInterval\");\r\n        } else {\r\n            this.combatStats.combatStyleHrid = \"smash\";\r\n            this.combatStats.attackInterval = 3000000000;\r\n        }\r\n\r\n        [\r\n            \"stabAccuracy\",\r\n            \"slashAccuracy\",\r\n            \"smashAccuracy\",\r\n            \"stabDamage\",\r\n            \"slashDamage\",\r\n            \"smashDamage\",\r\n            \"stabEvasion\",\r\n            \"slashEvasion\",\r\n            \"smashEvasion\",\r\n            \"armor\",\r\n            \"lifeSteal\",\r\n        ].forEach((stat) => {\r\n            this.combatStats[stat] = Object.values(this.equipment)\r\n                .filter((equipment) => equipment != null)\r\n                .map((equipment) => equipment.getCombatStat(stat))\r\n                .reduce((prev, cur) => prev + cur, 0);\r\n        });\r\n\r\n        if (this.equipment[\"/equipment_types/pouch\"]) {\r\n            this.combatStats.foodSlots = 1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"foodSlots\");\r\n            this.combatStats.drinkSlots = this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"drinkSlots\");\r\n        } else {\r\n            this.combatStats.foodSlots = 1;\r\n            this.combatStats.drinkSlots = 0;\r\n        }\r\n\r\n        this.combatStats.HPRegen = 0.005;\r\n        this.combatStats.MPRegen = 0.01;\r\n        this.combatStats.dropRate = 0;\r\n\r\n        super.updateCombatStats();\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import combatTriggerDependencyDetailMap from \"./data/combatTriggerDependencyDetailMap.json\";\r\n\r\nclass Trigger {\r\n    constructor(dependencyHrid, conditionHrid, comparatorHrid, value = 0) {\r\n        this.dependencyHrid = dependencyHrid;\r\n        this.conditionHrid = conditionHrid;\r\n        this.comparatorHrid = comparatorHrid;\r\n        this.value = value;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let trigger = new Trigger(dto.dependencyHrid, dto.conditionHrid, dto.comparatorHrid, dto.value);\r\n\r\n        return trigger;\r\n    }\r\n\r\n    isActive(source, target, friendlies, enemies) {\r\n        if (combatTriggerDependencyDetailMap[this.dependencyHrid].isSingleTarget) {\r\n            return this.isActiveSingleTarget(source, target);\r\n        } else {\r\n            return this.isActiveMultiTarget(friendlies, enemies);\r\n        }\r\n    }\r\n\r\n    isActiveSingleTarget(source, target) {\r\n        let dependencyValue;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/self\":\r\n                dependencyValue = this.getDependencyValue(source);\r\n                break;\r\n            case \"/combat_trigger_dependencies/targeted_enemy\":\r\n                if (!target) {\r\n                    return false;\r\n                }\r\n                dependencyValue = this.getDependencyValue(target);\r\n                break;\r\n            default:\r\n                console.error(\"Unknown dependencyHrid:\", this.dependencyHrid);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    isActiveMultiTarget(friendlies, enemies) {\r\n        let dependency;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/all_allies\":\r\n                dependency = friendlies;\r\n                break;\r\n            case \"/combat_trigger_dependencies/all_enemies\":\r\n                if (!enemies) {\r\n                    return false;\r\n                }\r\n                dependency = enemies;\r\n                break;\r\n            default:\r\n                console.error(\"Unknown dependencyHrid:\", this.dependencyHrid);\r\n                break;\r\n        }\r\n\r\n        let dependencyValue;\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/number_of_active_units\":\r\n                dependencyValue = dependency.filter((unit) => unit.combatStats.currentHitpoints > 0).length;\r\n                break;\r\n            default:\r\n                dependencyValue = dependency\r\n                    .map((unit) => this.getDependencyValue(unit))\r\n                    .reduce((prev, cur) => prev + cur, 0);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    getDependencyValue(source) {\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/attack_coffee\":\r\n            case \"/combat_trigger_conditions/berserk\":\r\n            case \"/combat_trigger_conditions/defense_coffee\":\r\n            case \"/combat_trigger_conditions/frenzy\":\r\n            case \"/combat_trigger_conditions/intelligence_coffee\":\r\n            case \"/combat_trigger_conditions/lucky_coffee\":\r\n            case \"/combat_trigger_conditions/power_coffee\":\r\n            case \"/combat_trigger_conditions/precision\":\r\n            case \"/combat_trigger_conditions/stamina_coffee\":\r\n            case \"/combat_trigger_conditions/super_attack_coffee\":\r\n            case \"/combat_trigger_conditions/super_defense_coffee\":\r\n            case \"/combat_trigger_conditions/super_intelligence_coffee\":\r\n            case \"/combat_trigger_conditions/super_power_coffee\":\r\n            case \"/combat_trigger_conditions/super_stamina_coffee\":\r\n            case \"/combat_trigger_conditions/swiftness_coffee\":\r\n            case \"/combat_trigger_conditions/toughness\":\r\n            case \"/combat_trigger_conditions/vampirism\":\r\n                let buffHrid = \"/buff_sources\";\r\n                buffHrid += this.conditionHrid.slice(this.conditionHrid.lastIndexOf(\"/\"));\r\n                return source.combatBuffs[buffHrid];\r\n            case \"/combat_trigger_conditions/current_hp\":\r\n                return source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/current_mp\":\r\n                return source.combatStats.currentManapoints;\r\n            case \"/combat_trigger_conditions/missing_hp\":\r\n                return source.combatStats.maxHitpoints - source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/missing_mp\":\r\n                return source.combatStats.maxManapoints - source.combatStats.currentManapoints;\r\n            default:\r\n                console.error(\"Unknown conditionHrid:\", this.conditionHrid);\r\n                break;\r\n        }\r\n    }\r\n\r\n    compareValue(dependencyValue) {\r\n        switch (this.comparatorHrid) {\r\n            case \"/combat_trigger_comparators/greater_than_equal\":\r\n                return dependencyValue >= this.value;\r\n            case \"/combat_trigger_comparators/less_than_equal\":\r\n                return dependencyValue <= this.value;\r\n            case \"/combat_trigger_comparators/is_active\":\r\n                return !!dependencyValue;\r\n            case \"/combat_trigger_comparators/is_inactive\":\r\n                return !dependencyValue;\r\n            default:\r\n                console.error(\"Unknown comparatorHrid\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trigger;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Player from \"./combatsimulator/player\";\r\n\r\n\r\nonmessage = function (event) {\r\n    console.log(event.data.player);\r\n    let player = Player.createFromDTO(event.data.player);\r\n    player.updateCombatStats();\r\n    console.log(player);\r\n};\r\n"],"names":[],"sourceRoot":""}