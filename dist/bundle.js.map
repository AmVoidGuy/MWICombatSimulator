{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAA0B;AACkC;AAC5B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;AC/CvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;ACZpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAwD;AACtF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;ACzJ4B;AAC8C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC,yBAAyB,4EAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;AC3Ba;AACkC;AACxE;AACA,sBAAsB,mDAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;AC9Be;AACtC;AACA,qBAAqB,mDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;ACtEsE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAgC;AAC5C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCzGvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;;;;;;;;;;;;;;;;;;ACrBuD;AACJ;AACF;AACJ;AAC+B;AACN;AACnB;AACA;AACnD;AACA;AACA;AACA;AACA,gCAAgC,yGAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kEAAM;AACvB;AACA;AACA;AACA;AACA;AACA,gDAAgD,qEAAS;AACzD,gDAAgD,qEAAS;AACzD,gDAAgD,qEAAS;AACzD,gDAAgD,qEAAS;AACzD,iDAAiD,qEAAS;AAC1D,qDAAqD,qEAAS;AAC9D,oDAAoD,qEAAS;AAC7D,iDAAiD,qEAAS;AAC1D;AACA;AACA;AACA;AACA,kBAAkB,mEAAO;AACzB;AACA;AACA;AACA,eAAe,gEAAI,CAAC,uHAA+D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B,mBAAmB,mEAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B,mBAAmB,mEAAO;AAC1B;AACA","sources":["webpack://mwicombatsimulator/./src/combatsimulator/ability.js","webpack://mwicombatsimulator/./src/combatsimulator/buff.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUnit.js","webpack://mwicombatsimulator/./src/combatsimulator/equipment.js","webpack://mwicombatsimulator/./src/combatsimulator/monster.js","webpack://mwicombatsimulator/./src/combatsimulator/player.js","webpack://mwicombatsimulator/./src/combatsimulator/trigger.js","webpack://mwicombatsimulator/webpack/bootstrap","webpack://mwicombatsimulator/webpack/runtime/define property getters","webpack://mwicombatsimulator/webpack/runtime/get javascript chunk filename","webpack://mwicombatsimulator/webpack/runtime/global","webpack://mwicombatsimulator/webpack/runtime/hasOwnProperty shorthand","webpack://mwicombatsimulator/webpack/runtime/make namespace object","webpack://mwicombatsimulator/webpack/runtime/publicPath","webpack://mwicombatsimulator/webpack/runtime/jsonp chunk loading","webpack://mwicombatsimulator/./src/main.js"],"sourcesContent":["import Buff from \"./buff\";\r\nimport abilityDetailMap from \"./data/abilityDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Ability {\r\n    constructor(hrid, level, triggers = null) {\r\n        this.hrid = hrid;\r\n        this.level = level;\r\n\r\n        let gameAbility = abilityDetailMap[hrid];\r\n\r\n        this.manaCost = gameAbility.manaCost;\r\n        this.cooldownDuration = gameAbility.cooldownDuration;\r\n\r\n        this.abilityEffects = [];\r\n\r\n        for (const effect of gameAbility.abilityEffects) {\r\n            let abilityEffect = {\r\n                targetType: effect.targetType,\r\n                effectType: effect.effectType,\r\n                combatStyleHrid: effect.combatStyleHrid,\r\n                damageFlat: effect.baseDamageFlat + (this.level - 1) * effect.baseDamageFlatLevelBonus,\r\n                damageRation: effect.baseDamageRatio + (this.level - 1) * effect.baseDamageRatioLevelBonus,\r\n                bleedRatio: effect.bleedRatio,\r\n                duration: effect.duration,\r\n                buff: new Buff(effect.buff, this.level),\r\n            };\r\n            this.abilityEffects.push(abilityEffect);\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameAbility.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Ability;\r\n","class Buff {\r\n    startTime;\r\n\r\n    constructor(buff, level = 1) {\r\n        this.sourceHrid = buff.sourceHrid;\r\n        this.typeHrid = buff.typeHrid;\r\n        this.ratioBoost = buff.ratioBoost + (level - 1) * buff.ratioBoostLevelBonus;\r\n        this.flatBoost = buff.flatBoost + (level - 1) * buff.flatBoostLevelBonus;\r\n        this.duration = buff.duration;\r\n    }\r\n}\r\n\r\nexport default Buff;\r\n","class CombatUnit {\r\n    player;\r\n\r\n    // Base levels which don't change after initialization\r\n    staminaLevel = 1;\r\n    intelligenceLevel = 1;\r\n    attackLevel = 1;\r\n    powerLevel = 1;\r\n    defenseLevel = 1;\r\n\r\n    abilities = [null, null, null, null];\r\n    food = [null, null, null];\r\n    drinks = [null, null, null];\r\n\r\n    // Calculated combat stats including temporary buffs\r\n    combatStats = {\r\n        combatStyleHrid: \"/combat_styles/smash\",\r\n        attackInterval: 3000000000,\r\n        stabAccuracy: 0,\r\n        slashAccuracy: 0,\r\n        smashAccuracy: 0,\r\n        stabDamage: 0,\r\n        slashDamage: 0,\r\n        smashDamage: 0,\r\n        stabEvasion: 0,\r\n        slashEvasion: 0,\r\n        smashEvasion: 0,\r\n        armor: 0,\r\n        lifeSteal: 0,\r\n        HPRegen: 0.005,\r\n        MPRegen: 0.01,\r\n        dropRate: 0,\r\n        foodSlots: 1,\r\n        drinkSlots: 0,\r\n        staminaLevel: 1,\r\n        intelligenceLevel: 1,\r\n        attackLevel: 1,\r\n        powerLevel: 1,\r\n        defenseLevel: 1,\r\n        maxHitpoints: 110,\r\n        currentHitpoints: 110,\r\n        maxManapoints: 110,\r\n        currentManapoints: 110,\r\n        stabAccuracyRating: 11,\r\n        slashAccuracyRating: 11,\r\n        smashAccuracyRating: 11,\r\n        stabMaxDamage: 11,\r\n        slashMaxDamage: 11,\r\n        smashMaxDamage: 11,\r\n        stabEvasionRating: 11,\r\n        slashEvasionRating: 11,\r\n        smashEvasionRating: 11,\r\n    };\r\n    combatBuffs = {};\r\n\r\n    constructor() {}\r\n\r\n    updateCombatStats() {\r\n        [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((stat) => {\r\n            this.combatStats[stat + \"Level\"] = this[stat + \"Level\"];\r\n            let boosts = this.getBuffBoosts(\"/buff_types/\" + stat + \"_level\");\r\n            boosts.forEach((buff) => {\r\n                this.combatStats[stat + \"Level\"] += Math.floor(this[stat + \"Level\"] * buff.ratioBoost);\r\n                this.combatStats[stat + \"Level\"] += buff.flatBoost;\r\n            });\r\n        });\r\n\r\n        this.combatStats.maxHitpoints = 10 * (10 + this.combatStats.staminaLevel);\r\n        this.combatStats.maxManapoints = 10 * (10 + this.combatStats.intelligenceLevel);\r\n\r\n        let accuracyBoosts = this.getBuffBoosts(\"/buff_types/accuracy\");\r\n        let accuracyRatioBoost = accuracyBoosts[0]?.ratioBoost ?? 0;\r\n\r\n        let damageBoosts = this.getBuffBoosts(\"/buff_types/damage\");\r\n        let damageRatioBoost = damageBoosts[0]?.ratioBoost ?? 0;\r\n\r\n        [\"stab\", \"slash\", \"smash\"].forEach((style) => {\r\n            this.combatStats[style + \"AccuracyRating\"] =\r\n                (10 + this.combatStats.attackLevel) *\r\n                (1 + this.combatStats[style + \"Accuracy\"]) *\r\n                (1 + accuracyRatioBoost);\r\n            this.combatStats[style + \"MaxDamage\"] =\r\n                (10 + this.combatStats.powerLevel) * (1 + this.combatStats[style + \"Damage\"]) * (1 + damageRatioBoost);\r\n            this.combatStats[style + \"EvasionRating\"] =\r\n                (10 + this.combatStats.defenseLevel) * (1 + this.combatStats[style + \"Evasion\"]);\r\n        });\r\n\r\n        // TODO: Test how frenzy and swiftness coffee stack\r\n        let attackIntervalBoosts = this.getBuffBoosts(\"/buff_types/attack_speed\");\r\n        let attackIntervalRatioBoost = attackIntervalBoosts\r\n            .map((boost) => boost.ratioBoost)\r\n            .reduce((prev, cur) => prev + cur, 0);\r\n        this.combatStats.attackInterval = this.combatStats.attackInterval * (1 / (1 + attackIntervalRatioBoost));\r\n\r\n        let armorBoosts = this.getBuffBoosts(\"/buff_types/armor\");\r\n        let armorFlatBoost = armorBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.armor += armorFlatBoost;\r\n\r\n        let lifeStealBoosts = this.getBuffBoosts(\"/buff_types/life_steal\");\r\n        let lifeStealFlatBoost = lifeStealBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.lifeSteal += lifeStealFlatBoost;\r\n\r\n        let HPRegenBoosts = this.getBuffBoosts(\"/buff_types/hp_regen\");\r\n        let HPRegenFlatBoost = HPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.HPRegen += HPRegenFlatBoost;\r\n\r\n        let MPRegenBoosts = this.getBuffBoosts(\"/buff_types/mp_regen\");\r\n        let MPRegenFlatBoost = MPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.MPRegen += MPRegenFlatBoost;\r\n\r\n        let dropRateBoosts = this.getBuffBoosts(\"/buff_types/combat_drop_rate\");\r\n        let dropRateRatioBoost = dropRateBoosts[0]?.ratioBoost ?? 0;\r\n        this.combatStats.dropRate += dropRateRatioBoost;\r\n    }\r\n\r\n    addBuff(buff, currentTime) {\r\n        buff.startTime = currentTime;\r\n        this.combatBuffs[buff.sourceHrid] = buff;\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    removeExpiredBuffs(currentTime) {\r\n        let expiredBuffs = Object.values(this.combatBuffs).filter(\r\n            (buff) => buff.startTime + buff.duration <= currentTime\r\n        );\r\n        expiredBuffs.forEach((buff) => {\r\n            delete this.combatBuffs[buff.sourceHrid];\r\n        });\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    getBuffBoosts(type) {\r\n        let boosts = [];\r\n        Object.values(this.combatBuffs)\r\n            .filter((buff) => buff.typeHrid == type)\r\n            .forEach((buff) => {\r\n                boosts.push({ ratioBoost: buff.ratioBoost, flatBoost: buff.flatBoost });\r\n            });\r\n\r\n        return boosts;\r\n    }\r\n\r\n    reset() {\r\n        this.combatBuffs = {};\r\n        this.updateCombatStats();\r\n\r\n        this.combatStats.currentHitpoints = this.combatStats.maxHitpoints;\r\n        this.combatStats.currentManapoints = this.combatStats.maxManapoints;\r\n    }\r\n}\r\n\r\nexport default CombatUnit;\r\n","import itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport enhancementLevelTotalMultiplierTable from \"./data/enhancementLevelTotalMultiplierTable.json\";\r\n\r\nclass Equipment {\r\n    constructor(id, enhancementLevel) {\r\n        this.id = id;\r\n        this.enhancementLevel = enhancementLevel;\r\n    }\r\n\r\n    getCombatStat(combatStat) {\r\n        let gameItem = itemDetailMap[this.id];\r\n        let multiplier = enhancementLevelTotalMultiplierTable[this.enhancementLevel];\r\n\r\n        let stat =\r\n            gameItem.equipmentDetail.combatStats[combatStat] +\r\n            multiplier * gameItem.equipmentDetail.combatEnhancementBonuses[combatStat];\r\n\r\n        return stat;\r\n    }\r\n\r\n    getCombatStyle() {\r\n        let gameItem = itemDetailMap[this.id];\r\n\r\n        return gameItem.equipmentDetail.combatStyleHrids[0];\r\n    }\r\n}\r\n\r\nexport default Equipment;\r\n","import CombatUnit from \"./combatUnit\";\r\nimport combatMonsterDetailMap from \"./data/combatMonsterDetailMap.json\";\r\n\r\nclass Monster extends CombatUnit {\r\n    constructor(monsterID) {\r\n        super();\r\n\r\n        this.player = false;\r\n        this.monsterID = monsterID;\r\n    }\r\n\r\n    updateCombatStats() {\r\n        let gameMonster = combatMonsterDetailMap[this.monsterID];\r\n\r\n        this.staminaLevel = gameMonster.combatDetails.staminaLevel;\r\n        this.intelligenceLevel = gameMonster.combatDetails.intelligenceLevel;\r\n        this.attackLevel = gameMonster.combatDetails.attackLevel;\r\n        this.powerLevel = gameMonster.combatDetails.powerLevel;\r\n        this.defenseLevel = gameMonster.combatDetails.defenseLevel;\r\n\r\n        this.combatStats.combatStyleHrid = gameMonster.combatDetails.combatStyleHrid;\r\n\r\n        for (const [key, value] of Object.entries(gameMonster.combatDetails.combatStats)) {\r\n            this.combatStats[key] = value;\r\n        }\r\n\r\n        super.updateCombatStats();\r\n    }\r\n}\r\n\r\nexport default Monster;\r\n","import CombatUnit from \"./combatUnit\";\r\n\r\nclass Player extends CombatUnit {\r\n    equipment = {\r\n        \"/equipment_types/head\": null,\r\n        \"/equipment_types/body\": null,\r\n        \"/equipment_types/legs\": null,\r\n        \"/equipment_types/feet\": null,\r\n        \"/equipment_types/hands\": null,\r\n        \"/equipment_types/main_hand\": null,\r\n        \"/equipment_types/two_hand\": null,\r\n        \"/equipment_types/off_hand\": null,\r\n        \"/equipment_types/pouch\": null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.player = true;\r\n    }\r\n\r\n    updateCombatStats() {\r\n        if (this.equipment[\"/equipment_types/main_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/main_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStat(\"attackInterval\");\r\n        } else if (this.equipment[\"/equipment_types/two_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/two_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStat(\"attackInterval\");\r\n        } else {\r\n            this.combatStats.combatStyleHrid = \"/combat_styles/smash\";\r\n            this.combatStats.attackInterval = 3000000000;\r\n        }\r\n\r\n        [\r\n            \"stabAccuracy\",\r\n            \"slashAccuracy\",\r\n            \"smashAccuracy\",\r\n            \"stabDamage\",\r\n            \"slashDamage\",\r\n            \"smashDamage\",\r\n            \"stabEvasion\",\r\n            \"slashEvasion\",\r\n            \"smashEvasion\",\r\n            \"armor\",\r\n            \"lifeSteal\",\r\n        ].forEach((stat) => {\r\n            this.combatStats[stat] = Object.values(this.equipment)\r\n                .filter((e) => e != null)\r\n                .map((e) => e.getCombatStat(stat))\r\n                .reduce((prev, cur) => prev + cur);\r\n        });\r\n\r\n        if (this.equipment[\"/equipment_types/pouch\"]) {\r\n            this.combatStats.foodSlots = 1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"foodSlots\");\r\n            this.combatStats.drinkSlots = this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"drinkSlots\");\r\n        } else {\r\n            this.combatStats.foodSlots = 1;\r\n            this.combatStats.drinkSlots = 0;\r\n        }\r\n\r\n        this.combatStats.HPRegen = 0.005;\r\n        this.combatStats.MPRegen = 0.01;\r\n        this.combatStats.dropRate = 0;\r\n\r\n        super.updateCombatStats();\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import combatTriggerDependencyDetailMap from \"./data/combatTriggerDependencyDetailMap.json\";\r\n\r\nclass Trigger {\r\n    constructor(dependencyHrid, conditionHrid, comparatorHrid, value = 0) {\r\n        this.dependencyHrid = dependencyHrid;\r\n        this.conditionHrid = conditionHrid;\r\n        this.comparatorHrid = comparatorHrid;\r\n        this.value = value;\r\n    }\r\n\r\n    isActive(source, target, friendlies, enemies) {\r\n        if (combatTriggerDependencyDetailMap[this.dependencyHrid].isSingleTarget) {\r\n            return this.isActiveSingleTarget(source, target);\r\n        } else {\r\n            return this.isActiveMultiTarget(friendlies, enemies);\r\n        }\r\n    }\r\n\r\n    isActiveSingleTarget(source, target) {\r\n        let dependencyValue;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/self\":\r\n                dependencyValue = this.getDependencyValue(source);\r\n                break;\r\n            case \"/combat_trigger_dependencies/targeted_enemy\":\r\n                dependencyValue = this.getDependencyValue(target);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    isActiveMultiTarget(friendlies, enemies) {\r\n        let dependency;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/all_allies\":\r\n                dependency = friendlies;\r\n                break;\r\n            case \"/combat_trigger_dependencies/all_enemies\":\r\n                dependency = enemies;\r\n                break;\r\n        }\r\n\r\n        let dependencyValue;\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/number_of_active_units\":\r\n                dependencyValue = dependency.filter((unit) => unit.combatStats.currentHitpoints > 0).length;\r\n                break;\r\n            default:\r\n                dependencyValue = dependency\r\n                    .map((unit) => this.getDependencyValue(unit))\r\n                    .reduce((prev, cur) => prev + cur, 0);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    getDependencyValue(source) {\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/attack_coffee\":\r\n            case \"/combat_trigger_conditions/berserk\":\r\n            case \"/combat_trigger_conditions/defense_coffee\":\r\n            case \"/combat_trigger_conditions/frenzy\":\r\n            case \"/combat_trigger_conditions/intelligence_coffee\":\r\n            case \"/combat_trigger_conditions/lucky_coffee\":\r\n            case \"/combat_trigger_conditions/power_coffee\":\r\n            case \"/combat_trigger_conditions/precision\":\r\n            case \"/combat_trigger_conditions/stamina_coffee\":\r\n            case \"/combat_trigger_conditions/super_attack_coffee\":\r\n            case \"/combat_trigger_conditions/super_defense_coffee\":\r\n            case \"/combat_trigger_conditions/super_intelligence_coffee\":\r\n            case \"/combat_trigger_conditions/super_power_coffee\":\r\n            case \"/combat_trigger_conditions/super_stamina_coffee\":\r\n            case \"/combat_trigger_conditions/swiftness_coffee\":\r\n            case \"/combat_trigger_conditions/toughness\":\r\n            case \"/combat_trigger_conditions/vampirism\":\r\n                let buffHrid = \"/buff_sources\";\r\n                buffHrid += this.conditionHrid.slice(this.conditionHrid.lastIndexOf(\"/\"));\r\n                return source.combatBuffs[buffHrid];\r\n            case \"/combat_trigger_conditions/current_hp\":\r\n                return source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/current_mp\":\r\n                return source.combatStats.currentManapoints;\r\n            case \"/combat_trigger_conditions/missing_hp\":\r\n                return source.combatStats.maxHitpoints - source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/missing_mp\":\r\n                return source.combatStats.maxManapoints - source.combatStats.currentManapoints;\r\n        }\r\n    }\r\n\r\n    compareValue(dependencyValue) {\r\n        switch (this.comparatorHrid) {\r\n            case \"/combat_trigger_comparators/greater_than_equal\":\r\n                return dependencyValue >= this.value;\r\n            case \"/combat_trigger_comparators/less_than_equal\":\r\n                return dependencyValue <= this.value;\r\n            case \"/combat_trigger_comparators/is_active\":\r\n                return !!dependencyValue;\r\n            case \"/combat_trigger_comparators/is_inactive\":\r\n                return !dependencyValue;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trigger;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","import Equipment from \"./combatsimulator/equipment.js\";\r\nimport Monster from \"./combatsimulator/monster.js\";\r\nimport Player from \"./combatsimulator/player.js\";\r\nimport Buff from \"./combatsimulator/buff.js\";\r\nimport abilityDetailMap from \"./combatsimulator/data/abilityDetailMap.json\";\r\nimport itemDetailMap from \"./combatsimulator/data/itemDetailMap.json\";\r\nimport Trigger from \"./combatsimulator/trigger.js\";\r\nimport Ability from \"./combatsimulator/ability.js\";\r\n\r\nlet button = document.querySelector(\"#button1\");\r\nlet input = document.querySelector(\"#input1\");\r\n\r\nlet worker = new Worker(new URL(\"worker.js\", import.meta.url));\r\n\r\nbutton.onclick = function () {\r\n    worker.postMessage(input.value);\r\n};\r\n\r\nworker.onmessage = function (event) {\r\n    window.alert(event.data);\r\n};\r\n\r\nlet player = new Player();\r\nplayer.staminaLevel = 70;\r\nplayer.intelligenceLevel = 67;\r\nplayer.attackLevel = 72;\r\nplayer.powerLevel = 70;\r\nplayer.defenseLevel = 70;\r\nplayer.equipment[\"/equipment_types/helm\"] = new Equipment(\"/items/crimson_helmet\", 3);\r\nplayer.equipment[\"/equipment_types/body\"] = new Equipment(\"/items/crimson_plate_body\", 3);\r\nplayer.equipment[\"/equipment_types/legs\"] = new Equipment(\"/items/crimson_plate_legs\", 3);\r\nplayer.equipment[\"/equipment_types/feet\"] = new Equipment(\"/items/crimson_boots\", 3);\r\nplayer.equipment[\"/equipment_types/hands\"] = new Equipment(\"/items/pincer_gloves\", 0);\r\nplayer.equipment[\"/equipment_types/main_hand\"] = new Equipment(\"/items/crimson_spear\", 3);\r\nplayer.equipment[\"/equipment_types/off_hand\"] = new Equipment(\"/items/azure_buckler\", 0);\r\nplayer.equipment[\"/equipment_types/pouch\"] = new Equipment(\"/items/large_pouch\", 0);\r\n\r\nplayer.updateCombatStats();\r\nconsole.log(\"Player:\", player);\r\n\r\nlet monster = new Monster(\"/combat_monsters/alligator\");\r\nmonster.updateCombatStats();\r\nconsole.log(\"Monster:\", monster);\r\n\r\nlet buff = new Buff(abilityDetailMap[\"/abilities/vampirism\"].abilityEffects[0].buff, 9);\r\n// let buff = new Buff(itemDetailMap[\"/items/super_power_coffee\"].consumableDetail.buffs[0]);\r\n\r\nconsole.log(\"Buff:\", buff);\r\n\r\nlet currentTime = 1000000000;\r\nlet stats = {};\r\n\r\nObject.entries(player.combatStats).forEach(([key, value]) => {\r\n    stats[key] = [value];\r\n});\r\n\r\nplayer.addBuff(buff, currentTime);\r\nObject.entries(player.combatStats).forEach(([key, value]) => {\r\n    stats[key].push(value);\r\n});\r\n\r\nplayer.removeExpiredBuffs(currentTime + buff.duration);\r\nObject.entries(player.combatStats).forEach(([key, value]) => {\r\n    stats[key].push(value);\r\n});\r\n\r\nconsole.table(stats);\r\n\r\nplayer.reset();\r\nplayer.addBuff(buff, currentTime);\r\n\r\nlet monster2 = new Monster(\"/combat_monsters/swampy\");\r\nlet monster3 = new Monster(\"/combat_monsters/snake\");\r\nmonster.reset();\r\nmonster2.reset();\r\nmonster3.reset();\r\nmonster2.combatStats.currentHitpoints -= 100;\r\nmonster3.combatStats.currentHitpoints -= 100;\r\n\r\nlet trigger = new Trigger(\r\n    \"/combat_trigger_dependencies/all_enemies\",\r\n    \"/combat_trigger_conditions/missing_hp\",\r\n    \"/combat_trigger_comparators/greater_than_equal\",\r\n    200\r\n);\r\nconsole.log(trigger.isActive(player, monster, [player], [monster, monster2, monster3]));\r\n\r\nlet ability1 = new Ability(\"/abilities/poke\", 13);\r\nlet ability2 = new Ability(\"/abilities/berserk\", 7, [trigger]);\r\nconsole.log(ability1);\r\nconsole.log(ability2);\r\n"],"names":[],"sourceRoot":""}