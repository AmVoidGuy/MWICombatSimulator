{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAA0B;AACkC;AAC5B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,6CAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8DAAqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;AClFvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;ACZpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAwD;AACtF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;ACxNA;AAC4B;AACtB;AAChC;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8DAAqB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;ACzE4B;AAC8C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA,yBAAyB,4EAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;ACvCO;AACM;AACA;AACF;AACpC;AACA,qBAAqB,mDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gEAAuB;AACnE;AACA;AACA,qDAAqD,iEAAwB;AAC7E,2DAA2D,iEAAwB;AACnF,qEAAqE,8DAAqB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;AC5FsE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAgiEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UClIvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;;;;;;;;;;;;;;;;;;;;;;ACrBuD;AACN;AAC2B;AACN;AACnB;AACM;AACmD;AACF;AACE;AACA;AAClC;AACc;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yGAA4B;AAC5D;AACA,iBAAiB,kEAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,sCAAsC,qEAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qEAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qEAAS;AACvD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,sCAAsC,qEAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,2BAA2B,qEAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA,uCAAuC,qEAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,2BAA2B,qEAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,0CAA0C,wEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,8BAA8B,wEAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,4DAA4D,wFAAgC;AAC5F,2DAA2D,wFAAgC;AAC3F,4DAA4D,wFAAgC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qEAAa;AACrD,MAAM;AACN,wCAAwC,wEAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wFAAgC;AAC5C;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wFAAgC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wFAAgC;AACrD;AACA;AACA;AACA,mCAAmC,uFAA+B;AAClE,MAAM;AACN,mCAAmC,uFAA+B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uFAA+B;AACnD;AACA,qEAAqE,wFAAgC;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wEAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+EAAsB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+EAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+EAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6BAA6B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,iCAAiC,sEAAU;AAC3C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,iCAAiC,sEAAU;AAC3C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,wDAAwD,wFAAgC;AACxF;AACA,8BAA8B,mEAAO;AACrkBAAkB;AAClB,qBAAqB;AACrB,gBAAgB;AAChB,kBAAkB;AAClB,qBAAqB;AACrB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://mwicombatsimulator/./src/combatsimulator/ability.js","webpack://mwicombatsimulator/./src/combatsimulator/buff.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUnit.js","webpack://mwicombatsimulator/./src/combatsimulator/consumable.js","webpack://mwicombatsimulator/./src/combatsimulator/equipment.js","webpack://mwicombatsimulator/./src/combatsimulator/player.js","webpack://mwicombatsimulator/./src/combatsimulator/trigger.js","webpack://mwicombatsimulator/webpack/bootstrap","webpack://mwicombatsimulator/webpack/runtime/define property getters","webpack://mwicombatsimulator/webpack/runtime/get javascript chunk filename","webpack://mwicombatsimulator/webpack/runtime/global","webpack://mwicombatsimulator/webpack/runtime/hasOwnProperty shorthand","webpack://mwicombatsimulator/webpack/runtime/make namespace object","webpack://mwicombatsimulator/webpack/runtime/publicPath","webpack://mwicombatsimulator/webpack/runtime/jsonp chunk loading","webpack://mwicombatsimulator/./src/main.js"],"sourcesContent":["import Buff from \"./buff\";\r\nimport abilityDetailMap from \"./data/abilityDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Ability {\r\n    constructor(hrid, level, triggers = null) {\r\n        this.hrid = hrid;\r\n        this.level = level;\r\n\r\n        let gameAbility = abilityDetailMap[hrid];\r\n        console.assert(gameAbility, \"No ability found for hrid:\" + this.hrid);\r\n\r\n        this.manaCost = gameAbility.manaCost;\r\n        this.cooldownDuration = gameAbility.cooldownDuration;\r\n\r\n        this.abilityEffects = [];\r\n\r\n        for (const effect of gameAbility.abilityEffects) {\r\n            let abilityEffect = {\r\n                targetType: effect.targetType,\r\n                effectType: effect.effectType,\r\n                combatStyleHrid: effect.combatStyleHrid.slice(effect.combatStyleHrid.lastIndexOf(\"/\") + 1),\r\n                damageFlat: effect.baseDamageFlat + (this.level - 1) * effect.baseDamageFlatLevelBonus,\r\n                damageRatio: effect.baseDamageRatio + (this.level - 1) * effect.baseDamageRatioLevelBonus,\r\n                bleedRatio: effect.bleedRatio,\r\n                bleedDuration: effect.bleedDuration,\r\n                stunChance: effect.stunChance,\r\n                stunDuration: effect.stunDuration,\r\n                buff: effect.buff.duration > 0 ? new Buff(effect.buff, this.level) : null,\r\n            };\r\n            this.abilityEffects.push(abilityEffect);\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameAbility.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let triggers = dto.triggers.map((trigger) => Trigger.createFromDTO(trigger));\r\n        let ability = new Ability(dto.hrid, dto.level, triggers);\r\n\r\n        return ability;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (source.isStunned) {\r\n            return false;\r\n        }\r\n\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies, currentTime)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Ability;\r\n","class Buff {\r\n    startTime;\r\n\r\n    constructor(buff, level = 1) {\r\n        this.sourceHrid = buff.sourceHrid;\r\n        this.typeHrid = buff.typeHrid;\r\n        this.ratioBoost = buff.ratioBoost + (level - 1) * buff.ratioBoostLevelBonus;\r\n        this.flatBoost = buff.flatBoost + (level - 1) * buff.flatBoostLevelBonus;\r\n        this.duration = buff.duration;\r\n    }\r\n}\r\n\r\nexport default Buff;\r\n","class CombatUnit {\r\n    isPlayer;\r\n    isStunned = false;\r\n    stunExpireTime = null;\r\n\r\n    // Base levels which don't change after initialization\r\n    staminaLevel = 1;\r\n    intelligenceLevel = 1;\r\n    attackLevel = 1;\r\n    powerLevel = 1;\r\n    defenseLevel = 1;\r\n\r\n    abilities = [null, null, null, null];\r\n    food = [null, null, null];\r\n    drinks = [null, null, null];\r\n\r\n    // Calculated combat stats including temporary buffs\r\n    combatStats = {\r\n        combatStyleHrid: \"smash\",\r\n        attackInterval: 3000000000,\r\n        stabAccuracy: 0,\r\n        slashAccuracy: 0,\r\n        smashAccuracy: 0,\r\n        stabDamage: 0,\r\n        slashDamage: 0,\r\n        smashDamage: 0,\r\n        stabEvasion: 0,\r\n        slashEvasion: 0,\r\n        smashEvasion: 0,\r\n        armor: 0,\r\n        lifeSteal: 0,\r\n        HPRegen: 0.01,\r\n        MPRegen: 0.01,\r\n        dropRate: 0,\r\n        foodSlots: 1,\r\n        drinkSlots: 1,\r\n        staminaLevel: 1,\r\n        intelligenceLevel: 1,\r\n        attackLevel: 1,\r\n        powerLevel: 1,\r\n        defenseLevel: 1,\r\n        maxHitpoints: 110,\r\n        currentHitpoints: 110,\r\n        maxManapoints: 110,\r\n        currentManapoints: 110,\r\n        stabAccuracyRating: 11,\r\n        slashAccuracyRating: 11,\r\n        smashAccuracyRating: 11,\r\n        stabMaxDamage: 11,\r\n        slashMaxDamage: 11,\r\n        smashMaxDamage: 11,\r\n        stabEvasionRating: 11,\r\n        slashEvasionRating: 11,\r\n        smashEvasionRating: 11,\r\n    };\r\n    combatBuffs = {};\r\n\r\n    constructor() {}\r\n\r\n    updateCombatStats() {\r\n        this.combatStats.HPRegen = 0.01;\r\n        this.combatStats.MPRegen = 0.01;\r\n\r\n        [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((stat) => {\r\n            this.combatStats[stat + \"Level\"] = this[stat + \"Level\"];\r\n            let boosts = this.getBuffBoosts(\"/buff_types/\" + stat + \"_level\");\r\n            boosts.forEach((buff) => {\r\n                this.combatStats[stat + \"Level\"] += Math.floor(this[stat + \"Level\"] * buff.ratioBoost);\r\n                this.combatStats[stat + \"Level\"] += buff.flatBoost;\r\n            });\r\n        });\r\n\r\n        this.combatStats.maxHitpoints = 10 * (10 + this.combatStats.staminaLevel);\r\n        this.combatStats.maxManapoints = 10 * (10 + this.combatStats.intelligenceLevel);\r\n\r\n        let accuracyBoosts = this.getBuffBoosts(\"/buff_types/accuracy\");\r\n        let accuracyRatioBoost = accuracyBoosts[0]?.ratioBoost ?? 0;\r\n        console.assert(accuracyBoosts.length <= 1, \"Multiple accuracy buffs active\");\r\n\r\n        let damageBoosts = this.getBuffBoosts(\"/buff_types/damage\");\r\n        let damageRatioBoost = damageBoosts[0]?.ratioBoost ?? 0;\r\n        console.assert(damageBoosts.length <= 1, \"Multiple damage buffs active\");\r\n\r\n        [\"stab\", \"slash\", \"smash\"].forEach((style) => {\r\n            this.combatStats[style + \"AccuracyRating\"] =\r\n                (10 + this.combatStats.attackLevel) *\r\n                (1 + this.combatStats[style + \"Accuracy\"]) *\r\n                (1 + accuracyRatioBoost);\r\n            this.combatStats[style + \"MaxDamage\"] =\r\n                (10 + this.combatStats.powerLevel) * (1 + this.combatStats[style + \"Damage\"]) * (1 + damageRatioBoost);\r\n            this.combatStats[style + \"EvasionRating\"] =\r\n                (10 + this.combatStats.defenseLevel) * (1 + this.combatStats[style + \"Evasion\"]);\r\n        });\r\n\r\n        let attackIntervalBoosts = this.getBuffBoosts(\"/buff_types/attack_speed\");\r\n        let attackIntervalRatioBoost = attackIntervalBoosts\r\n            .map((boost) => boost.ratioBoost)\r\n            .reduce((prev, cur) => prev + cur, 0);\r\n        this.combatStats.attackInterval = this.combatStats.attackInterval * (1 / (1 + attackIntervalRatioBoost));\r\n\r\n        let armorBoosts = this.getBuffBoosts(\"/buff_types/armor\");\r\n        let armorFlatBoost = armorBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.armor += armorFlatBoost;\r\n        console.assert(armorBoosts.length <= 1, \"Multiple armor buffs active\");\r\n\r\n        let lifeStealBoosts = this.getBuffBoosts(\"/buff_types/life_steal\");\r\n        let lifeStealFlatBoost = lifeStealBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.lifeSteal += lifeStealFlatBoost;\r\n        console.assert(lifeStealBoosts.length <= 1, \"Multiple life steal buffs active\");\r\n\r\n        let HPRegenBoosts = this.getBuffBoosts(\"/buff_types/hp_regen\");\r\n        let HPRegenFlatBoost = HPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.HPRegen += HPRegenFlatBoost;\r\n        console.assert(HPRegenBoosts.length <= 1, \"Multiple hp regen buffs active\");\r\n\r\n        let MPRegenBoosts = this.getBuffBoosts(\"/buff_types/mp_regen\");\r\n        let MPRegenFlatBoost = MPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.MPRegen += MPRegenFlatBoost;\r\n        console.assert(MPRegenBoosts.length <= 1, \"Multiple mp regen buffs active\");\r\n\r\n        let dropRateBoosts = this.getBuffBoosts(\"/buff_types/combat_drop_rate\");\r\n        let dropRateRatioBoost = dropRateBoosts[0]?.ratioBoost ?? 0;\r\n        this.combatStats.dropRate += dropRateRatioBoost;\r\n        console.assert(dropRateBoosts.length <= 1, \"Multiple drop rate buffs active\");\r\n    }\r\n\r\n    addBuff(buff, currentTime) {\r\n        buff.startTime = currentTime;\r\n        this.combatBuffs[buff.sourceHrid] = buff;\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    removeExpiredBuffs(currentTime) {\r\n        let expiredBuffs = Object.values(this.combatBuffs).filter(\r\n            (buff) => buff.startTime + buff.duration <= currentTime\r\n        );\r\n        expiredBuffs.forEach((buff) => {\r\n            delete this.combatBuffs[buff.sourceHrid];\r\n        });\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    clearBuffs() {\r\n        this.combatBuffs = {};\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    getBuffBoosts(type) {\r\n        let boosts = [];\r\n        Object.values(this.combatBuffs)\r\n            .filter((buff) => buff.typeHrid == type)\r\n            .forEach((buff) => {\r\n                boosts.push({ ratioBoost: buff.ratioBoost, flatBoost: buff.flatBoost });\r\n            });\r\n\r\n        return boosts;\r\n    }\r\n\r\n    reset(currentTime = 0) {\r\n        this.isStunned = false;\r\n        this.stunExpireTime = null;\r\n\r\n        this.clearBuffs();\r\n        this.updateCombatStats();\r\n        this.resetCooldowns(currentTime);\r\n\r\n        this.combatStats.currentHitpoints = this.combatStats.maxHitpoints;\r\n        this.combatStats.currentManapoints = this.combatStats.maxManapoints;\r\n    }\r\n\r\n    resetCooldowns(currentTime = 0) {\r\n        this.food.filter((food) => food != null).forEach((food) => (food.lastUsed = Number.MIN_SAFE_INTEGER));\r\n        this.drinks.filter((drink) => drink != null).forEach((drink) => (drink.lastUsed = Number.MIN_SAFE_INTEGER));\r\n\r\n        this.abilities\r\n            .filter((ability) => ability != null)\r\n            .forEach((ability) => {\r\n                if (this.isPlayer) {\r\n                    ability.lastUsed = Number.MIN_SAFE_INTEGER;\r\n                } else {\r\n                    ability.lastUsed = currentTime - Math.floor(Math.random() * ability.cooldownDuration);\r\n                }\r\n            });\r\n    }\r\n\r\n    addHitpoints(hitpoints) {\r\n        let hitpointsAdded = 0;\r\n\r\n        if (this.combatStats.currentHitpoints >= this.combatStats.maxHitpoints) {\r\n            return hitpointsAdded;\r\n        }\r\n\r\n        let newHitpoints = Math.min(this.combatStats.currentHitpoints + hitpoints, this.combatStats.maxHitpoints);\r\n        hitpointsAdded = newHitpoints - this.combatStats.currentHitpoints;\r\n        this.combatStats.currentHitpoints = newHitpoints;\r\n\r\n        return hitpointsAdded;\r\n    }\r\n\r\n    addManapoints(manapoints) {\r\n        let manapointsAdded = 0;\r\n\r\n        if (this.combatStats.currentManapoints >= this.combatStats.maxManapoints) {\r\n            return manapointsAdded;\r\n        }\r\n\r\n        let newManapoints = Math.min(this.combatStats.currentManapoints + manapoints, this.combatStats.maxManapoints);\r\n        manapointsAdded = newManapoints - this.combatStats.currentManapoints;\r\n        this.combatStats.currentManapoints = newManapoints;\r\n\r\n        return manapointsAdded;\r\n    }\r\n}\r\n\r\nexport default CombatUnit;\r\n","import Buff from \"./buff\";\r\nimport itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Consumable {\r\n    constructor(hrid, triggers = null) {\r\n        this.hrid = hrid;\r\n\r\n        let gameConsumable = itemDetailMap[this.hrid];\r\n        console.assert(gameConsumable, \"No consumable found for hrid:\" + this.hrid);\r\n\r\n        this.cooldownDuration = gameConsumable.consumableDetail.cooldownDuration;\r\n        this.hitpointRestore = gameConsumable.consumableDetail.hitpointRestore;\r\n        this.manapointRestore = gameConsumable.consumableDetail.manapointRestore;\r\n        this.recoveryDuration = gameConsumable.consumableDetail.recoveryDuration;\r\n\r\n        this.buffs = [];\r\n        if (gameConsumable.consumableDetail.buffs) {\r\n            for (const consumableBuff of gameConsumable.consumableDetail.buffs) {\r\n                let buff = new Buff(consumableBuff);\r\n                this.buffs.push(buff);\r\n            }\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameConsumable.consumableDetail.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let triggers = dto.triggers.map((trigger) => Trigger.createFromDTO(trigger));\r\n        let consumable = new Consumable(dto.hrid, triggers);\r\n\r\n        return consumable;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (source.isStunned) {\r\n            return false;\r\n        }\r\n\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies, currentTime)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Consumable;\r\n","import itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport enhancementLevelTotalMultiplierTable from \"./data/enhancementLevelTotalMultiplierTable.json\";\r\n\r\nclass Equipment {\r\n    constructor(hrid, enhancementLevel) {\r\n        this.hrid = hrid;\r\n        this.enhancementLevel = enhancementLevel;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let equipment = new Equipment(dto.hrid, dto.enhancementLevel);\r\n\r\n        return equipment;\r\n    }\r\n\r\n    getCombatStat(combatStat) {\r\n        let gameItem = itemDetailMap[this.hrid];\r\n        console.assert(gameItem, \"No equipment found for hrid:\" + this.hrid);\r\n\r\n        let multiplier = enhancementLevelTotalMultiplierTable[this.enhancementLevel];\r\n\r\n        let stat =\r\n            gameItem.equipmentDetail.combatStats[combatStat] +\r\n            multiplier * gameItem.equipmentDetail.combatEnhancementBonuses[combatStat];\r\n\r\n        return stat;\r\n    }\r\n\r\n    getCombatStyle() {\r\n        let gameItem = itemDetailMap[this.hrid];\r\n        console.assert(gameItem, \"No equipment found for hrid:\" + this.hrid);\r\n\r\n        let gameCombatStyle = gameItem.equipmentDetail.combatStats.combatStyleHrids[0];\r\n        let combatStyle = gameCombatStyle.slice(gameCombatStyle.lastIndexOf(\"/\") + 1);\r\n\r\n        return combatStyle;\r\n    }\r\n}\r\n\r\nexport default Equipment;\r\n","import Ability from \"./ability\";\r\nimport CombatUnit from \"./combatUnit\";\r\nimport Consumable from \"./consumable\";\r\nimport Equipment from \"./equipment\";\r\n\r\nclass Player extends CombatUnit {\r\n    equipment = {\r\n        \"/equipment_types/head\": null,\r\n        \"/equipment_types/body\": null,\r\n        \"/equipment_types/legs\": null,\r\n        \"/equipment_types/feet\": null,\r\n        \"/equipment_types/hands\": null,\r\n        \"/equipment_types/main_hand\": null,\r\n        \"/equipment_types/two_hand\": null,\r\n        \"/equipment_types/off_hand\": null,\r\n        \"/equipment_types/pouch\": null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.isPlayer = true;\r\n        this.hrid = \"player\";\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let player = new Player();\r\n\r\n        player.staminaLevel = dto.staminaLevel;\r\n        player.intelligenceLevel = dto.intelligenceLevel;\r\n        player.attackLevel = dto.attackLevel;\r\n        player.powerLevel = dto.powerLevel;\r\n        player.defenseLevel = dto.defenseLevel;\r\n\r\n        for (const [key, value] of Object.entries(dto.equipment)) {\r\n            player.equipment[key] = value ? Equipment.createFromDTO(value) : null;\r\n        }\r\n\r\n        player.food = dto.food.map((food) => (food ? Consumable.createFromDTO(food) : null));\r\n        player.drinks = dto.drinks.map((drink) => (drink ? Consumable.createFromDTO(drink) : null));\r\n        player.abilities = dto.abilities.map((ability) => (ability ? Ability.createFromDTO(ability) : null));\r\n\r\n        return player;\r\n    }\r\n\r\n    updateCombatStats() {\r\n        if (this.equipment[\"/equipment_types/main_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/main_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStat(\"attackInterval\");\r\n        } else if (this.equipment[\"/equipment_types/two_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/two_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStat(\"attackInterval\");\r\n        } else {\r\n            this.combatStats.combatStyleHrid = \"smash\";\r\n            this.combatStats.attackInterval = 3000000000;\r\n        }\r\n\r\n        [\r\n            \"stabAccuracy\",\r\n            \"slashAccuracy\",\r\n            \"smashAccuracy\",\r\n            \"stabDamage\",\r\n            \"slashDamage\",\r\n            \"smashDamage\",\r\n            \"stabEvasion\",\r\n            \"slashEvasion\",\r\n            \"smashEvasion\",\r\n            \"armor\",\r\n            \"lifeSteal\",\r\n        ].forEach((stat) => {\r\n            this.combatStats[stat] = Object.values(this.equipment)\r\n                .filter((equipment) => equipment != null)\r\n                .map((equipment) => equipment.getCombatStat(stat))\r\n                .reduce((prev, cur) => prev + cur, 0);\r\n        });\r\n\r\n        if (this.equipment[\"/equipment_types/pouch\"]) {\r\n            this.combatStats.foodSlots = 1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"foodSlots\");\r\n            this.combatStats.drinkSlots = 1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"drinkSlots\");\r\n        } else {\r\n            this.combatStats.foodSlots = 1;\r\n            this.combatStats.drinkSlots = 1;\r\n        }\r\n\r\n        this.combatStats.dropRate = 0;\r\n\r\n        super.updateCombatStats();\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import combatTriggerDependencyDetailMap from \"./data/combatTriggerDependencyDetailMap.json\";\r\n\r\nclass Trigger {\r\n    constructor(dependencyHrid, conditionHrid, comparatorHrid, value = 0) {\r\n        this.dependencyHrid = dependencyHrid;\r\n        this.conditionHrid = conditionHrid;\r\n        this.comparatorHrid = comparatorHrid;\r\n        this.value = value;\r\n    }\r\n\r\n    static createFromDTO(dto) {\r\n        let trigger = new Trigger(dto.dependencyHrid, dto.conditionHrid, dto.comparatorHrid, dto.value);\r\n\r\n        return trigger;\r\n    }\r\n\r\n    isActive(source, target, friendlies, enemies, currentTime) {\r\n        if (combatTriggerDependencyDetailMap[this.dependencyHrid].isSingleTarget) {\r\n            return this.isActiveSingleTarget(source, target, currentTime);\r\n        } else {\r\n            return this.isActiveMultiTarget(friendlies, enemies, currentTime);\r\n        }\r\n    }\r\n\r\n    isActiveSingleTarget(source, target, currentTime) {\r\n        let dependencyValue;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/self\":\r\n                dependencyValue = this.getDependencyValue(source, currentTime);\r\n                break;\r\n            case \"/combat_trigger_dependencies/targeted_enemy\":\r\n                if (!target) {\r\n                    return false;\r\n                }\r\n                dependencyValue = this.getDependencyValue(target, currentTime);\r\n                break;\r\n            default:\r\n                console.error(\"Unknown dependencyHrid:\", this.dependencyHrid);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    isActiveMultiTarget(friendlies, enemies, currentTime) {\r\n        let dependency;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/all_allies\":\r\n                dependency = friendlies;\r\n                break;\r\n            case \"/combat_trigger_dependencies/all_enemies\":\r\n                if (!enemies) {\r\n                    return false;\r\n                }\r\n                dependency = enemies;\r\n                break;\r\n            default:\r\n                console.error(\"Unknown dependencyHrid:\", this.dependencyHrid);\r\n                break;\r\n        }\r\n\r\n        let dependencyValue;\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/number_of_active_units\":\r\n                dependencyValue = dependency.filter((unit) => unit.combatStats.currentHitpoints > 0).length;\r\n                break;\r\n            default:\r\n                dependencyValue = dependency\r\n                    .map((unit) => this.getDependencyValue(unit, currentTime))\r\n                    .reduce((prev, cur) => prev + cur, 0);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    getDependencyValue(source, currentTime) {\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/attack_coffee\":\r\n            case \"/combat_trigger_conditions/berserk\":\r\n            case \"/combat_trigger_conditions/defense_coffee\":\r\n            case \"/combat_trigger_conditions/frenzy\":\r\n            case \"/combat_trigger_conditions/intelligence_coffee_max_mp\":\r\n            case \"/combat_trigger_conditions/intelligence_coffee_mp_regen\":\r\n            case \"/combat_trigger_conditions/lucky_coffee\":\r\n            case \"/combat_trigger_conditions/power_coffee\":\r\n            case \"/combat_trigger_conditions/precision\":\r\n            case \"/combat_trigger_conditions/stamina_coffee_hp_regen\":\r\n            case \"/combat_trigger_conditions/stamina_coffee_max_hp\":\r\n            case \"/combat_trigger_conditions/swiftness_coffee\":\r\n            case \"/combat_trigger_conditions/toughness\":\r\n            case \"/combat_trigger_conditions/vampirism\":\r\n                let buffHrid = \"/buff_sources\";\r\n                buffHrid += this.conditionHrid.slice(this.conditionHrid.lastIndexOf(\"/\"));\r\n                return source.combatBuffs[buffHrid];\r\n            case \"/combat_trigger_conditions/current_hp\":\r\n                return source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/current_mp\":\r\n                return source.combatStats.currentManapoints;\r\n            case \"/combat_trigger_conditions/missing_hp\":\r\n                return source.combatStats.maxHitpoints - source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/missing_mp\":\r\n                return source.combatStats.maxManapoints - source.combatStats.currentManapoints;\r\n            case \"/combat_trigger_conditions/stun_status\":\r\n                // Replicate the game's behaviour of \"stun status active\" triggers activating\r\n                // immediately after the stun has worn off\r\n                return source.isStunned || source.stunExpireTime == currentTime;\r\n            default:\r\n                console.error(\"Unknown conditionHrid:\", this.conditionHrid);\r\n                break;\r\n        }\r\n    }\r\n\r\n    compareValue(dependencyValue) {\r\n        switch (this.comparatorHrid) {\r\n            case \"/combat_trigger_comparators/greater_than_equal\":\r\n                return dependencyValue >= this.value;\r\n            case \"/combat_trigger_comparators/less_than_equal\":\r\n                return dependencyValue <= this.value;\r\n            case \"/combat_trigger_comparators/is_active\":\r\n                return !!dependencyValue;\r\n            case \"/combat_trigger_comparators/is_inactive\":\r\n                return !dependencyValue;\r\n            default:\r\n                console.error(\"Unknown comparatorHrid\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trigger;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","import Equipment from \"./combatsimulator/equipment.js\";\r\nimport Player from \"./combatsimulator/player.js\";\r\nimport abilityDetailMap from \"./combatsimulator/data/abilityDetailMap.json\";\r\nimport itemDetailMap from \"./combatsimulator/data/itemDetailMap.json\";\r\nimport Ability from \"./combatsimulator/ability.js\";\r\nimport Consumable from \"./combatsimulator/consumable.js\";\r\nimport combatTriggerDependencyDetailMap from \"./combatsimulator/data/combatTriggerDependencyDetailMap.json\";\r\nimport combatTriggerConditionDetailMap from \"./combatsimulator/data/combatTriggerConditionDetailMap.json\";\r\nimport combatTriggerComparatorDetailMap from \"./combatsimulator/data/combatTriggerComparatorDetailMap.json\";\r\nimport abilitySlotsLevelRequirementList from \"./combatsimulator/data/abilitySlotsLevelRequirementList.json\";\r\nimport actionDetailMap from \"./combatsimulator/data/actionDetailMap.json\";\r\nimport combatMonsterDetailMap from \"./combatsimulator/data/combatMonsterDetailMap.json\";\r\n\r\nconst ONE_SECOND = 1e9;\r\nconst ONE_HOUR = 60 * 60 * ONE_SECOND;\r\n\r\nlet buttonStartSimulation = document.getElementById(\"buttonStartSimulation\");\r\nlet progressbar = document.getElementById(\"simulationProgressBar\");\r\n\r\nlet worker = new Worker(new URL(\"worker.js\", import.meta.url));\r\n\r\nlet player = new Player();\r\nlet food = [null, null, null];\r\nlet drinks = [null, null, null];\r\nlet abilities = [null, null, null, null];\r\nlet triggerMap = {};\r\nlet modalTriggers = [];\r\n\r\n// #region Worker\r\n\r\nworker.onmessage = function (event) {\r\n    switch (event.data.type) {\r\n        case \"simulation_result\":\r\n            progressbar.style.width = \"100%\";\r\n            progressbar.innerHTML = \"100%\";\r\n            showSimulationResult(event.data.simResult);\r\n            buttonStartSimulation.disabled = false;\r\n            break;\r\n        case \"simulation_progress\":\r\n            let progress = Math.floor(100 * event.data.progress);\r\n            progressbar.style.width = progress + \"%\";\r\n            progressbar.innerHTML = progress + \"%\";\r\n            break;\r\n        case \"simulation_error\":\r\n            showErrorModal(event.data.error.toString());\r\n            break;\r\n    }\r\n};\r\n\r\n// #endregion\r\n\r\n// #region Equipment\r\n\r\nfunction initEquipmentSection() {\r\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"main_hand\", \"two_hand\", \"off_hand\", \"pouch\"].forEach((type) => {\r\n        initEquipmentSelect(type);\r\n        initEnhancementLevelInput(type);\r\n    });\r\n}\r\n\r\nfunction initEquipmentSelect(equipmentType) {\r\n    let selectId = \"selectEquipment_\";\r\n    if (equipmentType == \"main_hand\" || equipmentType == \"two_hand\") {\r\n        selectId += \"weapon\";\r\n    } else {\r\n        selectId += equipmentType;\r\n    }\r\n    let selectElement = document.getElementById(selectId);\r\n\r\n    let gameEquipment = Object.values(itemDetailMap)\r\n        .filter((item) => item.categoryHrid == \"/item_categories/equipment\")\r\n        .filter((item) => item.equipmentDetail.type == \"/equipment_types/\" + equipmentType)\r\n        .sort((a, b) => a.sortIndex - b.sortIndex);\r\n\r\n    for (const equipment of Object.values(gameEquipment)) {\r\n        selectElement.add(new Option(equipment.name, equipment.hrid));\r\n    }\r\n\r\n    selectElement.addEventListener(\"change\", (event) => {\r\n        equipmentSelectHandler(event, equipmentType);\r\n    });\r\n}\r\n\r\nfunction initEnhancementLevelInput(equipmentType) {\r\n    let inputId = \"inputEquipmentEnhancementLevel_\";\r\n    if (equipmentType == \"main_hand\" || equipmentType == \"two_hand\") {\r\n        inputId += \"weapon\";\r\n    } else {\r\n        inputId += equipmentType;\r\n    }\r\n\r\n    let inputElement = document.getElementById(inputId);\r\n    inputElement.value = 0;\r\n    inputElement.addEventListener(\"change\", enhancementLevelInputHandler);\r\n}\r\n\r\nfunction equipmentSelectHandler(event, type) {\r\n    let equipmentType = \"/equipment_types/\" + type;\r\n\r\n    if (!event.target.value) {\r\n        updateEquipmentState();\r\n        updateUI();\r\n        return;\r\n    }\r\n\r\n    let gameItem = itemDetailMap[event.target.value];\r\n\r\n    // Weapon select has two handlers because of mainhand and twohand weapons. Ignore the handler with the wrong type\r\n    if (gameItem.equipmentDetail.type != equipmentType) {\r\n        return;\r\n    }\r\n\r\n    if (type == \"two_hand\") {\r\n        document.getElementById(\"selectEquipment_off_hand\").value = \"\";\r\n        document.getElementById(\"inputEquipmentEnhancementLevel_off_hand\").value = 0;\r\n    }\r\n    if (type == \"off_hand\" && player.equipment[\"/equipment_types/two_hand\"]) {\r\n        document.getElementById(\"selectEquipment_weapon\").value = \"\";\r\n        document.getElementById(\"inputEquipmentEnhancementLevel_weapon\").value = 0;\r\n    }\r\n\r\n    updateEquipmentState();\r\n    updateUI();\r\n}\r\n\r\nfunction enhancementLevelInputHandler() {\r\n    updateEquipmentState();\r\n    updateUI();\r\n}\r\n\r\nfunction updateEquipmentState() {\r\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"main_hand\", \"two_hand\", \"off_hand\", \"pouch\"].forEach((type) => {\r\n        let equipmentType = \"/equipment_types/\" + type;\r\n        let selectType = type;\r\n        if (type == \"main_hand\" || type == \"two_hand\") {\r\n            selectType = \"weapon\";\r\n        }\r\n\r\n        let equipmentSelect = document.getElementById(\"selectEquipment_\" + selectType);\r\n        let equipmentHrid = equipmentSelect.value;\r\n\r\n        if (!equipmentHrid) {\r\n            player.equipment[equipmentType] = null;\r\n            return;\r\n        }\r\n\r\n        let gameItem = itemDetailMap[equipmentHrid];\r\n\r\n        // Clear old weapon if a weapon of a different type is equipped\r\n        if (gameItem.equipmentDetail.type != equipmentType) {\r\n            player.equipment[equipmentType] = null;\r\n            return;\r\n        }\r\n\r\n        let enhancementLevel = Number(document.getElementById(\"inputEquipmentEnhancementLevel_\" + selectType).value);\r\n        player.equipment[equipmentType] = new Equipment(gameItem.hrid, enhancementLevel);\r\n    });\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Combat Stats\r\n\r\nfunction updateCombatStatsUI() {\r\n    player.updateCombatStats();\r\n\r\n    [\r\n        \"maxHitpoints\",\r\n        \"maxManapoints\",\r\n        \"stabAccuracyRating\",\r\n        \"stabMaxDamage\",\r\n        \"slashAccuracyRating\",\r\n        \"slashMaxDamage\",\r\n        \"smashAccuracyRating\",\r\n        \"smashMaxDamage\",\r\n        \"stabEvasionRating\",\r\n        \"slashEvasionRating\",\r\n        \"smashEvasionRating\",\r\n        \"armor\",\r\n    ].forEach((stat) => {\r\n        let element = document.getElementById(\"combatStat_\" + stat);\r\n        element.innerHTML = Math.floor(player.combatStats[stat]);\r\n    });\r\n\r\n    let combatStyleElement = document.getElementById(\"combatStat_combatStyleHrid\");\r\n    let combatStyle = player.combatStats.combatStyleHrid;\r\n    combatStyleElement.innerHTML = combatStyle.charAt(0).toUpperCase() + combatStyle.slice(1);\r\n\r\n    let attackIntervalElement = document.getElementById(\"combatStat_attackInterval\");\r\n    attackIntervalElement.innerHTML = (player.combatStats.attackInterval / 1e9).toLocaleString() + \"s\";\r\n\r\n    [\"lifeSteal\", \"HPRegen\", \"MPRegen\"].forEach((stat) => {\r\n        let element = document.getElementById(\"combatStat_\" + stat);\r\n        let value = (100 * player.combatStats[stat]).toLocaleString([], {\r\n            minimumFractionDigits: 0,\r\n            maximumFractionDigits: 2,\r\n        });\r\n        element.innerHTML = value + \"%\";\r\n    });\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Level\r\n\r\nfunction initLevelSection() {\r\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((skill) => {\r\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\r\n        levelInput.value = 1;\r\n        levelInput.addEventListener(\"change\", levelInputHandler);\r\n    });\r\n}\r\n\r\nfunction levelInputHandler() {\r\n    updateLevels();\r\n    updateUI();\r\n}\r\n\r\nfunction updateLevels() {\r\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((skill) => {\r\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\r\n        player[skill + \"Level\"] = Number(levelInput.value);\r\n    });\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Food\r\n\r\nfunction initFoodSection() {\r\n    for (let i = 0; i < 3; i++) {\r\n        let element = document.getElementById(\"selectFood_\" + i);\r\n\r\n        let gameFoods = Object.values(itemDetailMap)\r\n            .filter((item) => item.categoryHrid == \"/item_categories/food\")\r\n            .sort((a, b) => a.sortIndex - b.sortIndex);\r\n\r\n        for (const food of Object.values(gameFoods)) {\r\n            element.add(new Option(food.name, food.hrid));\r\n        }\r\n\r\n        element.addEventListener(\"change\", foodSelectHandler);\r\n    }\r\n}\r\n\r\nfunction foodSelectHandler() {\r\n    updateFoodState();\r\n    updateUI();\r\n}\r\n\r\nfunction updateFoodState() {\r\n    for (let i = 0; i < 3; i++) {\r\n        let foodSelect = document.getElementById(\"selectFood_\" + i);\r\n        food[i] = foodSelect.value;\r\n        if (food[i] && !triggerMap[food[i]]) {\r\n            let gameItem = itemDetailMap[food[i]];\r\n            triggerMap[food[i]] = structuredClone(gameItem.consumableDetail.defaultCombatTriggers);\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateFoodUI() {\r\n    for (let i = 0; i < 3; i++) {\r\n        let selectElement = document.getElementById(\"selectFood_\" + i);\r\n        let triggerButton = document.getElementById(\"buttonFoodTrigger_\" + i);\r\n\r\n        selectElement.disabled = i >= player.combatStats.foodSlots;\r\n        triggerButton.disabled = i >= player.combatStats.foodSlots || !food[i];\r\n    }\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Drinks\r\n\r\nfunction initDrinksSection() {\r\n    for (let i = 0; i < 3; i++) {\r\n        let element = document.getElementById(\"selectDrink_\" + i);\r\n\r\n        let gameDrinks = Object.values(itemDetailMap)\r\n            .filter((item) => item.categoryHrid == \"/item_categories/drink\")\r\n            .filter((item) => item.consumableDetail.usableInActionTypeMap[\"/action_types/combat\"])\r\n            .sort((a, b) => a.sortIndex - b.sortIndex);\r\n\r\n        for (const drink of Object.values(gameDrinks)) {\r\n            element.add(new Option(drink.name, drink.hrid));\r\n        }\r\n\r\n        element.addEventListener(\"change\", drinkSelectHandler);\r\n    }\r\n}\r\n\r\nfunction drinkSelectHandler() {\r\n    updateDrinksState();\r\n    updateDrinksUI();\r\n}\r\n\r\nfunction updateDrinksState() {\r\n    for (let i = 0; i < 3; i++) {\r\n        let drinkSelect = document.getElementById(\"selectDrink_\" + i);\r\n        drinks[i] = drinkSelect.value;\r\n        if (drinks[i] && !triggerMap[drinks[i]]) {\r\n            let gameItem = itemDetailMap[drinks[i]];\r\n            triggerMap[drinks[i]] = structuredClone(gameItem.consumableDetail.defaultCombatTriggers);\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateDrinksUI() {\r\n    for (let i = 0; i < 3; i++) {\r\n        let selectElement = document.getElementById(\"selectDrink_\" + i);\r\n        let triggerButton = document.getElementById(\"buttonDrinkTrigger_\" + i);\r\n\r\n        selectElement.disabled = i >= player.combatStats.drinkSlots;\r\n        triggerButton.disabled = i >= player.combatStats.drinkSlots || !drinks[i];\r\n    }\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Abilities\r\n\r\nfunction initAbilitiesSection() {\r\n    for (let i = 0; i < 4; i++) {\r\n        let selectElement = document.getElementById(\"selectAbility_\" + i);\r\n        let inputElement = document.getElementById(\"inputAbilityLevel_\" + i);\r\n\r\n        inputElement.value = 1;\r\n\r\n        let gameAbilities = Object.values(abilityDetailMap).sort((a, b) => a.sortIndex - b.sortIndex);\r\n\r\n        for (const ability of Object.values(gameAbilities)) {\r\n            selectElement.add(new Option(ability.name, ability.hrid));\r\n        }\r\n\r\n        selectElement.addEventListener(\"change\", abilitySelectHandler);\r\n    }\r\n}\r\n\r\nfunction abilitySelectHandler() {\r\n    updateAbilityState();\r\n    updateAbilityUI();\r\n}\r\n\r\nfunction updateAbilityState() {\r\n    for (let i = 0; i < 4; i++) {\r\n        let abilitySelect = document.getElementById(\"selectAbility_\" + i);\r\n        abilities[i] = abilitySelect.value;\r\n        if (abilities[i] && !triggerMap[abilities[i]]) {\r\n            let gameAbility = abilityDetailMap[abilities[i]];\r\n            triggerMap[abilities[i]] = structuredClone(gameAbility.defaultCombatTriggers);\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateAbilityUI() {\r\n    for (let i = 0; i < 4; i++) {\r\n        let selectElement = document.getElementById(\"selectAbility_\" + i);\r\n        let inputElement = document.getElementById(\"inputAbilityLevel_\" + i);\r\n        let triggerButton = document.getElementById(\"buttonAbilityTrigger_\" + i);\r\n\r\n        selectElement.disabled = player.intelligenceLevel < abilitySlotsLevelRequirementList[i + 1];\r\n        inputElement.disabled = player.intelligenceLevel < abilitySlotsLevelRequirementList[i + 1];\r\n        triggerButton.disabled = player.intelligenceLevel < abilitySlotsLevelRequirementList[i + 1] || !abilities[i];\r\n    }\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Trigger\r\n\r\nfunction initTriggerModal() {\r\n    let modal = document.getElementById(\"triggerModal\");\r\n    modal.addEventListener(\"show.bs.modal\", (event) => triggerModalShownHandler(event));\r\n\r\n    let triggerSaveButton = document.getElementById(\"buttonTriggerModalSave\");\r\n    triggerSaveButton.addEventListener(\"click\", (event) => triggerModalSaveHandler(event));\r\n\r\n    let triggerAddButton = document.getElementById(\"buttonAddTrigger\");\r\n    triggerAddButton.addEventListener(\"click\", (event) => triggerAddButtonHandler(event));\r\n\r\n    let triggerDefaultButton = document.getElementById(\"buttonDefaultTrigger\");\r\n    triggerDefaultButton.addEventListener(\"click\", (event) => triggerDefaultButtonHandler(event));\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        let triggerDependencySelect = document.getElementById(\"selectTriggerDependency_\" + i);\r\n        let triggerConditionSelect = document.getElementById(\"selectTriggerCondition_\" + i);\r\n        let triggerComparatorSelect = document.getElementById(\"selectTriggerComparator_\" + i);\r\n        let triggerValueInput = document.getElementById(\"inputTriggerValue_\" + i);\r\n        let triggerRemoveButton = document.getElementById(\"buttonRemoveTrigger_\" + i);\r\n\r\n        triggerDependencySelect.addEventListener(\"change\", (event) => triggerDependencySelectHandler(event, i));\r\n        triggerConditionSelect.addEventListener(\"change\", (event) => triggerConditionSelectHandler(event, i));\r\n        triggerComparatorSelect.addEventListener(\"change\", (event) => triggerComparatorSelectHander(event, i));\r\n        triggerValueInput.addEventListener(\"change\", (event) => triggerValueInputHandler(event, i));\r\n        triggerRemoveButton.addEventListener(\"click\", (event) => triggerRemoveButtonHandler(event, i));\r\n    }\r\n}\r\n\r\nfunction triggerModalShownHandler(event) {\r\n    let triggerButton = event.relatedTarget;\r\n\r\n    let triggerType = triggerButton.getAttribute(\"data-bs-triggertype\");\r\n    let triggerIndex = Number(triggerButton.getAttribute(\"data-bs-triggerindex\"));\r\n\r\n    let triggerTarget;\r\n    switch (triggerType) {\r\n        case \"food\":\r\n            triggerTarget = food[triggerIndex];\r\n            break;\r\n        case \"drink\":\r\n            triggerTarget = drinks[triggerIndex];\r\n            break;\r\n        case \"ability\":\r\n            triggerTarget = abilities[triggerIndex];\r\n            break;\r\n    }\r\n\r\n    let triggerTargetnput = document.getElementById(\"inputModalTriggerTarget\");\r\n    triggerTargetnput.value = triggerTarget;\r\n    modalTriggers = triggerMap[triggerTarget];\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction triggerModalSaveHandler(event) {\r\n    let triggerTargetnput = document.getElementById(\"inputModalTriggerTarget\");\r\n    let triggerTarget = triggerTargetnput.value;\r\n\r\n    triggerMap[triggerTarget] = modalTriggers;\r\n}\r\n\r\nfunction triggerDependencySelectHandler(event, index) {\r\n    modalTriggers[index].dependencyHrid = event.target.value;\r\n    modalTriggers[index].conditionHrid = \"\";\r\n    modalTriggers[index].comparatorHrid = \"\";\r\n    modalTriggers[index].value = 0;\r\n\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction triggerConditionSelectHandler(event, index) {\r\n    modalTriggers[index].conditionHrid = event.target.value;\r\n    modalTriggers[index].comparatorHrid = \"\";\r\n    modalTriggers[index].value = 0;\r\n\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction triggerComparatorSelectHander(event, index) {\r\n    modalTriggers[index].comparatorHrid = event.target.value;\r\n\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction triggerValueInputHandler(event, index) {\r\n    modalTriggers[index].value = Number(event.target.value);\r\n\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction triggerRemoveButtonHandler(event, index) {\r\n    modalTriggers.splice(index, 1);\r\n\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction triggerAddButtonHandler(event) {\r\n    if (modalTriggers.length == 4) {\r\n        return;\r\n    }\r\n\r\n    modalTriggers.push({\r\n        dependencyHrid: \"\",\r\n        conditionHrid: \"\",\r\n        comparatorHrid: \"\",\r\n        value: 0,\r\n    });\r\n\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction triggerDefaultButtonHandler(event) {\r\n    let triggerTargetnput = document.getElementById(\"inputModalTriggerTarget\");\r\n    let triggerTarget = triggerTargetnput.value;\r\n\r\n    if (triggerTarget.startsWith(\"/items/\")) {\r\n        modalTriggers = structuredClone(itemDetailMap[triggerTarget].consumableDetail.defaultCombatTriggers);\r\n    } else {\r\n        modalTriggers = structuredClone(abilityDetailMap[triggerTarget].defaultCombatTriggers);\r\n    }\r\n\r\n    updateTriggerModal();\r\n}\r\n\r\nfunction updateTriggerModal() {\r\n    let triggerStartTextElement = document.getElementById(\"triggerStartText\");\r\n    if (modalTriggers.length == 0) {\r\n        triggerStartTextElement.innerHTML = \"Activate as soon as it's off cooldown\";\r\n    } else {\r\n        triggerStartTextElement.innerHTML = \"Activate when:\";\r\n    }\r\n\r\n    let triggerAddButton = document.getElementById(\"buttonAddTrigger\");\r\n    triggerAddButton.disabled = modalTriggers.length == 4;\r\n\r\n    let triggersValid = true;\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        let triggerElement = document.getElementById(\"modalTrigger_\" + i);\r\n\r\n        if (!modalTriggers[i]) {\r\n            hideElement(triggerElement);\r\n            continue;\r\n        }\r\n\r\n        showElement(triggerElement);\r\n\r\n        let triggerDependencySelect = document.getElementById(\"selectTriggerDependency_\" + i);\r\n        let triggerConditionSelect = document.getElementById(\"selectTriggerCondition_\" + i);\r\n        let triggerComparatorSelect = document.getElementById(\"selectTriggerComparator_\" + i);\r\n        let triggerValueInput = document.getElementById(\"inputTriggerValue_\" + i);\r\n\r\n        showElement(triggerDependencySelect);\r\n        fillTriggerDependencySelect(triggerDependencySelect);\r\n\r\n        if (modalTriggers[i].dependencyHrid == \"\") {\r\n            hideElement(triggerConditionSelect);\r\n            hideElement(triggerComparatorSelect);\r\n            hideElement(triggerValueInput);\r\n            triggersValid = false;\r\n            continue;\r\n        }\r\n\r\n        triggerDependencySelect.value = modalTriggers[i].dependencyHrid;\r\n        showElement(triggerConditionSelect);\r\n        fillTriggerConditionSelect(triggerConditionSelect, modalTriggers[i].dependencyHrid);\r\n\r\n        if (modalTriggers[i].conditionHrid == \"\") {\r\n            hideElement(triggerComparatorSelect);\r\n            hideElement(triggerValueInput);\r\n            triggersValid = false;\r\n            continue;\r\n        }\r\n\r\n        triggerConditionSelect.value = modalTriggers[i].conditionHrid;\r\n        showElement(triggerComparatorSelect);\r\n        fillTriggerComparatorSelect(triggerComparatorSelect, modalTriggers[i].conditionHrid);\r\n\r\n        if (modalTriggers[i].comparatorHrid == \"\") {\r\n            hideElement(triggerValueInput);\r\n            triggersValid = false;\r\n            continue;\r\n        }\r\n\r\n        triggerComparatorSelect.value = modalTriggers[i].comparatorHrid;\r\n\r\n        if (combatTriggerComparatorDetailMap[modalTriggers[i].comparatorHrid].allowValue) {\r\n            showElement(triggerValueInput);\r\n            triggerValueInput.value = modalTriggers[i].value;\r\n        } else {\r\n            hideElement(triggerValueInput);\r\n        }\r\n    }\r\n\r\n    let triggerSaveButton = document.getElementById(\"buttonTriggerModalSave\");\r\n    triggerSaveButton.disabled = !triggersValid;\r\n}\r\n\r\nfunction fillTriggerDependencySelect(element) {\r\n    element.length = 0;\r\n    element.add(new Option(\"\", \"\"));\r\n\r\n    for (const dependency of Object.values(combatTriggerDependencyDetailMap).sort(\r\n        (a, b) => a.sortIndex - b.sortIndex\r\n    )) {\r\n        element.add(new Option(dependency.name, dependency.hrid));\r\n    }\r\n}\r\n\r\nfunction fillTriggerConditionSelect(element, dependencyHrid) {\r\n    let dependency = combatTriggerDependencyDetailMap[dependencyHrid];\r\n\r\n    let conditions;\r\n    if (dependency.isSingleTarget) {\r\n        conditions = Object.values(combatTriggerConditionDetailMap).filter((condition) => condition.isSingleTarget);\r\n    } else {\r\n        conditions = Object.values(combatTriggerConditionDetailMap).filter((condition) => condition.isMultiTarget);\r\n    }\r\n\r\n    element.length = 0;\r\n    element.add(new Option(\"\", \"\"));\r\n\r\n    for (const condition of Object.values(conditions).sort((a, b) => a.sortIndex - b.sortIndex)) {\r\n        element.add(new Option(condition.name, condition.hrid));\r\n    }\r\n}\r\n\r\nfunction fillTriggerComparatorSelect(element, conditionHrid) {\r\n    let condition = combatTriggerConditionDetailMap[conditionHrid];\r\n\r\n    let comparators = condition.allowedComparatorHrids.map((hrid) => combatTriggerComparatorDetailMap[hrid]);\r\n\r\n    element.length = 0;\r\n    element.add(new Option(\"\", \"\"));\r\n\r\n    for (const comparator of Object.values(comparators).sort((a, b) => a.sortIndex - b.sortIndex)) {\r\n        element.add(new Option(comparator.name, comparator.hrid));\r\n    }\r\n}\r\n\r\nfunction hideElement(element) {\r\n    element.classList.remove(\"d-flex\");\r\n    element.classList.add(\"d-none\");\r\n}\r\n\r\nfunction showElement(element) {\r\n    element.classList.remove(\"d-none\");\r\n    element.classList.add(\"d-flex\");\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Zones\r\n\r\nfunction initZones() {\r\n    let zoneSelect = document.getElementById(\"selectZone\");\r\n\r\n    let gameZones = Object.values(actionDetailMap)\r\n        .filter((action) => action.type == \"/action_types/combat\")\r\n        .sort((a, b) => a.sortIndex - b.sortIndex);\r\n\r\n    for (const zone of Object.values(gameZones)) {\r\n        zoneSelect.add(new Option(zone.name, zone.hrid));\r\n    }\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Simulation Result\r\n\r\nfunction showSimulationResult(simResult) {\r\n    showKills(simResult);\r\n    showDeaths(simResult);\r\n    showExperienceGained(simResult);\r\n    showConsumablesUsed(simResult);\r\n    showHitpointsGained(simResult);\r\n    showManapointsGained(simResult);\r\n    showDamageDone(simResult);\r\n    showDamageTaken(simResult);\r\n}\r\n\r\nfunction showKills(simResult) {\r\n    let resultDiv = document.getElementById(\"simulationResultKills\");\r\n    let newChildren = [];\r\n\r\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\r\n    let playerDeaths = simResult.deaths[\"player\"] ?? 0;\r\n    let encountersPerHour = ((simResult.encounters) / hoursSimulated).toFixed(1);\r\n\r\n    let encountersRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Encounters\", encountersPerHour]);\r\n    newChildren.push(encountersRow);\r\n\r\n    let monsters = Object.keys(simResult.deaths)\r\n        .filter((enemy) => enemy != \"player\")\r\n        .sort();\r\n\r\n    for (const monster of monsters) {\r\n        let killsPerHour = (simResult.deaths[monster] / hoursSimulated).toFixed(1);\r\n        let monsterRow = createRow(\r\n            [\"col-md-6\", \"col-md-6 text-end\"],\r\n            [combatMonsterDetailMap[monster].name, killsPerHour]\r\n        );\r\n        newChildren.push(monsterRow);\r\n    }\r\n\r\n    resultDiv.replaceChildren(...newChildren);\r\n}\r\n\r\nfunction showDeaths(simResult) {\r\n    let resultDiv = document.getElementById(\"simulationResultPlayerDeaths\");\r\n\r\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\r\n    let playerDeaths = simResult.deaths[\"player\"] ?? 0;\r\n    let deathsPerHour = (playerDeaths / hoursSimulated).toFixed(2);\r\n\r\n    let deathRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Player\", deathsPerHour]);\r\n    resultDiv.replaceChildren(deathRow);\r\n}\r\n\r\nfunction showExperienceGained(simResult) {\r\n    let resultDiv = document.getElementById(\"simulationResultExperienceGain\");\r\n    let newChildren = [];\r\n\r\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\r\n\r\n    let totalExperience = Object.values(simResult.experienceGained[\"player\"]).reduce((prev, cur) => prev + cur, 0);\r\n    let totalExperiencePerHour = (totalExperience / hoursSimulated).toFixed(0);\r\n    let totalRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Total\", totalExperiencePerHour]);\r\n    newChildren.push(totalRow);\r\n\r\n    [\"Stamina\", \"Intelligence\", \"Attack\", \"Power\", \"Defense\"].forEach((skill) => {\r\n        let experience = simResult.experienceGained[\"player\"][skill.toLowerCase()] ?? 0;\r\n        let experiencePerHour = (experience / hoursSimulated).toFixed(0);\r\n        let experienceRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [skill, experiencePerHour]);\r\n        newChildren.push(experienceRow);\r\n    });\r\n\r\n    resultDiv.replaceChildren(...newChildren);\r\n}\r\n\r\nfunction showConsumablesUsed(simResult) {\r\n    let resultDiv = document.getElementById(\"simulationResultConsumablesUsed\");\r\n    let newChildren = [];\r\n\r\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\r\n\r\n    if (!simResult.consumablesUsed[\"player\"]) {\r\n        resultDiv.replaceChildren(...newChildren);\r\n        return;\r\n    }\r\n\r\n    let consumablesUsed = Object.entries(simResult.consumablesUsed[\"player\"]).sort((a, b) => b[1] - a[1]);\r\n\r\n    for (const [consumable, amount] of consumablesUsed) {\r\n        let consumablesPerHour = (amount / hoursSimulated).toFixed(0);\r\n        let consumableRow = createRow(\r\n            [\"col-md-6\", \"col-md-6 text-end\"],\r\n            [itemDetailMap[consumable].name, consumablesPerHour]\r\n        );\r\n        newChildren.push(consumableRow);\r\n    }\r\n\r\n    resultDiv.replaceChildren(...newChildren);\r\n}\r\n\r\nfunction showHitpointsGained(simResult) {\r\n    let resultDiv = document.getElementById(\"simulationResultHealthRestored\");\r\n    let newChildren = [];\r\n\r\n    let secondsSimulated = simResult.simulatedTime / ONE_SECOND;\r\n\r\n    if (!simResult.hitpointsGained[\"player\"]) {\r\n        resultDiv.replaceChildren(...newChildren);\r\n        return;\r\n    }\r\n\r\n    let hitpointsGained = Object.entries(simResult.hitpointsGained[\"player\"]).sort((a, b) => b[1] - a[1]);\r\n\r\n    let totalHitpointsGained = hitpointsGained.reduce((prev, cur) => prev + cur[1], 0);\r\n    let totalHitpointsPerSecond = (totalHitpointsGained / secondsSimulated).toFixed(2);\r\n    let totalRow = createRow(\r\n        [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\r\n        [\"Total\", totalHitpointsPerSecond, \"100%\"]\r\n    );\r\n    newChildren.push(totalRow);\r\n\r\n    for (const [source, amount] of hitpointsGained) {\r\n        if (amount == 0) {\r\n            continue;\r\n        }\r\n\r\n        let sourceText;\r\n        switch (source) {\r\n            case \"regen\":\r\n                sourceText = \"Regen\";\r\n                break;\r\n            case \"lifesteal\":\r\n                sourceText = \"Life Steal\";\r\n                break;\r\n            default:\r\n                sourceText = itemDetailMap[source].name;\r\n                break;\r\n        }\r\n        let hitpointsPerSecond = (amount / secondsSimulated).toFixed(2);\r\n        let percentage = ((100 * amount) / totalHitpointsGained).toFixed(0);\r\n\r\n        let row = createRow(\r\n            [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\r\n            [sourceText, hitpointsPerSecond, percentage + \"%\"]\r\n        );\r\n        newChildren.push(row);\r\n    }\r\n\r\n    resultDiv.replaceChildren(...newChildren);\r\n}\r\n\r\nfunction showManapointsGained(simResult) {\r\n    let resultDiv = document.getElementById(\"simulationResultManaRestored\");\r\n    let newChildren = [];\r\n\r\n    let secondsSimulated = simResult.simulatedTime / ONE_SECOND;\r\n\r\n    if (!simResult.manapointsGained[\"player\"]) {\r\n        resultDiv.replaceChildren(...newChildren);\r\n        return;\r\n    }\r\n\r\n    let manapointsGained = Object.entries(simResult.manapointsGained[\"player\"]).sort((a, b) => b[1] - a[1]);\r\n\r\n    let totalManapointsGained = manapointsGained.reduce((prev, cur) => prev + cur[1], 0);\r\n    let totalManapointsPerSecond = (totalManapointsGained / secondsSimulated).toFixed(2);\r\n    let totalRow = createRow(\r\n        [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\r\n        [\"Total\", totalManapointsPerSecond, \"100%\"]\r\n    );\r\n    newChildren.push(totalRow);\r\n\r\n    for (const [source, amount] of manapointsGained) {\r\n        if (amount == 0) {\r\n            continue;\r\n        }\r\n\r\n        let sourceText;\r\n        switch (source) {\r\n            case \"regen\":\r\n                sourceText = \"Regen\";\r\n                break;\r\n            default:\r\n                sourceText = itemDetailMap[source].name;\r\n                break;\r\n        }\r\n        let manapointsPerSecond = (amount / secondsSimulated).toFixed(2);\r\n        let percentage = ((100 * amount) / totalManapointsGained).toFixed(0);\r\n\r\n        let row = createRow(\r\n            [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\r\n            [sourceText, manapointsPerSecond, percentage + \"%\"]\r\n        );\r\n        newChildren.push(row);\r\n    }\r\n\r\n    let ranOutOfManaText = simResult.playerRanOutOfMana ? \"Yes\" : \"No\";\r\n    let ranOutOfManaRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Ran out of mana\", ranOutOfManaText]);\r\n    newChildren.push(ranOutOfManaRow);\r\n\r\n    resultDiv.replaceChildren(...newChildren);\r\n}\r\n\r\nfunction showDamageDone(simResult) {\r\n    let totalDamageDone = {};\r\n    let enemyIndex = 1;\r\n\r\n    let secondsSimulated = simResult.simulatedTime / ONE_SECOND;\r\n\r\n    for (let i = 1; i < 6; i++) {\r\n        let accordion = document.getElementById(\"simulationResultDamageDoneAccordionEnemy\" + i);\r\n        hideElement(accordion);\r\n    }\r\n\r\n    for (const [target, abilities] of Object.entries(simResult.attacks[\"player\"])) {\r\n        let targetDamageDone = {};\r\n\r\n        for (const [ability, abilityCasts] of Object.entries(abilities)) {\r\n            let casts = Object.values(abilityCasts).reduce((prev, cur) => prev + cur, 0);\r\n            let misses = abilityCasts[\"miss\"] ?? 0;\r\n            let damage = Object.entries(abilityCasts)\r\n                .filter((entry) => entry[0] != \"miss\")\r\n                .reduce((prev, cur) => prev + Number(cur[0]) * cur[1], 0);\r\n\r\n            targetDamageDone[ability] = {\r\n                casts,\r\n                misses,\r\n                damage,\r\n            };\r\n            if (totalDamageDone[ability]) {\r\n                totalDamageDone[ability].casts += casts;\r\n                totalDamageDone[ability].misses += misses;\r\n                totalDamageDone[ability].damage += damage;\r\n            } else {\r\n                totalDamageDone[ability] = {\r\n                    casts,\r\n                    misses,\r\n                    damage,\r\n                };\r\n            }\r\n        }\r\n\r\n        let resultDiv = document.getElementById(\"simulationResultDamageDoneEnemy\" + enemyIndex);\r\n        createDamageTable(resultDiv, targetDamageDone, secondsSimulated);\r\n\r\n        let resultAccordion = document.getElementById(\"simulationResultDamageDoneAccordionEnemy\" + enemyIndex);\r\n        showElement(resultAccordion);\r\n\r\n        let resultAccordionButton = document.getElementById(\r\n            \"buttonSimulationResultDamageDoneAccordionEnemy\" + enemyIndex\r\n        );\r\n        let targetName = combatMonsterDetailMap[target].name;\r\n        resultAccordionButton.innerHTML = \"<b>Damage Done (\" + targetName + \")</b>\";\r\n\r\n        enemyIndex++;\r\n    }\r\n\r\n    let totalResultDiv = document.getElementById(\"simulationResultTotalDamageDone\");\r\n    createDamageTable(totalResultDiv, totalDamageDone, secondsSimulated);\r\n}\r\n\r\nfunction showDamageTaken(simResult) {\r\n    let totalDamageTaken = {};\r\n    let enemyIndex = 1;\r\n\r\n    let secondsSimulated = simResult.simulatedTime / ONE_SECOND;\r\n\r\n    for (let i = 1; i < 6; i++) {\r\n        let accordion = document.getElementById(\"simulationResultDamageTakenAccordionEnemy\" + i);\r\n        hideElement(accordion);\r\n    }\r\n\r\n    for (const [source, targets] of Object.entries(simResult.attacks)) {\r\n        if (source == \"player\") {\r\n            continue;\r\n        }\r\n\r\n        let sourceDamageTaken = {};\r\n\r\n        for (const [ability, abilityCasts] of Object.entries(targets[\"player\"])) {\r\n            let casts = Object.values(abilityCasts).reduce((prev, cur) => prev + cur, 0);\r\n            let misses = abilityCasts[\"miss\"] ?? 0;\r\n            let damage = Object.entries(abilityCasts)\r\n                .filter((entry) => entry[0] != \"miss\")\r\n                .reduce((prev, cur) => prev + Number(cur[0]) * cur[1], 0);\r\n\r\n            sourceDamageTaken[ability] = {\r\n                casts,\r\n                misses,\r\n                damage,\r\n            };\r\n            if (totalDamageTaken[ability]) {\r\n                totalDamageTaken[ability].casts += casts;\r\n                totalDamageTaken[ability].misses += misses;\r\n                totalDamageTaken[ability].damage += damage;\r\n            } else {\r\n                totalDamageTaken[ability] = {\r\n                    casts,\r\n                    misses,\r\n                    damage,\r\n                };\r\n            }\r\n        }\r\n\r\n        let resultDiv = document.getElementById(\"simulationResultDamageTakenEnemy\" + enemyIndex);\r\n        createDamageTable(resultDiv, sourceDamageTaken, secondsSimulated);\r\n\r\n        let resultAccordion = document.getElementById(\"simulationResultDamageTakenAccordionEnemy\" + enemyIndex);\r\n        showElement(resultAccordion);\r\n\r\n        let resultAccordionButton = document.getElementById(\r\n            \"buttonSimulationResultDamageTakenAccordionEnemy\" + enemyIndex\r\n        );\r\n        let sourceName = combatMonsterDetailMap[source].name;\r\n        resultAccordionButton.innerHTML = \"<b>Damage Taken (\" + sourceName + \")</b>\";\r\n\r\n        enemyIndex++;\r\n    }\r\n\r\n    let totalResultDiv = document.getElementById(\"simulationResultTotalDamageTaken\");\r\n    createDamageTable(totalResultDiv, totalDamageTaken, secondsSimulated);\r\n}\r\n\r\nfunction createDamageTable(resultDiv, damageDone, secondsSimulated) {\r\n    let newChildren = [];\r\n\r\n    let sortedDamageDone = Object.entries(damageDone).sort((a, b) => b[1].damage - a[1].damage);\r\n\r\n    let totalCasts = sortedDamageDone.reduce((prev, cur) => prev + cur[1].casts, 0);\r\n    let totalMisses = sortedDamageDone.reduce((prev, cur) => prev + cur[1].misses, 0);\r\n    let totalDamage = sortedDamageDone.reduce((prev, cur) => prev + cur[1].damage, 0);\r\n    let totalHitChance = ((100 * (totalCasts - totalMisses)) / totalCasts).toFixed(1);\r\n    let totalDamagePerSecond = (totalDamage / secondsSimulated).toFixed(2);\r\n\r\n    let totalRow = createRow(\r\n        [\"col-md-5\", \"col-md-3 text-end\", \"col-md-2 text-end\", \"col-md-2 text-end\"],\r\n        [\"Total\", totalHitChance + \"%\", totalDamagePerSecond, \"100%\"]\r\n    );\r\n    newChildren.push(totalRow);\r\n\r\n    for (const [ability, damageInfo] of sortedDamageDone) {\r\n        let abilityText;\r\n        switch (ability) {\r\n            case \"autoAttack\":\r\n                abilityText = \"Auto Attack\";\r\n                break;\r\n            case \"bleed\":\r\n                abilityText = \"Bleed\";\r\n                break;\r\n            default:\r\n                abilityText = abilityDetailMap[ability].name;\r\n                break;\r\n        }\r\n\r\n        let hitChance = ((100 * (damageInfo.casts - damageInfo.misses)) / damageInfo.casts).toFixed(1);\r\n        let damagePerSecond = (damageInfo.damage / secondsSimulated).toFixed(2);\r\n        let percentage = ((100 * damageInfo.damage) / totalDamage).toFixed(0);\r\n\r\n        let row = createRow(\r\n            [\"col-md-5\", \"col-md-3 text-end\", \"col-md-2 text-end\", \"col-md-2 text-end\"],\r\n            [abilityText, hitChance + \"%\", damagePerSecond, percentage + \"%\"]\r\n        );\r\n        newChildren.push(row);\r\n    }\r\n\r\n    resultDiv.replaceChildren(...newChildren);\r\n}\r\n\r\nfunction createRow(columnClassNames, columnValues) {\r\n    let row = createElement(\"div\", \"row\");\r\n\r\n    for (let i = 0; i < columnClassNames.length; i++) {\r\n        let column = createElement(\"div\", columnClassNames[i], columnValues[i]);\r\n        row.appendChild(column);\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nfunction createElement(tagName, className, innerHTML = \"\") {\r\n    let element = document.createElement(tagName);\r\n    element.className = className;\r\n    element.innerHTML = innerHTML;\r\n\r\n    return element;\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Simulation Controls\r\n\r\nfunction initSimulationControls() {\r\n    let simulationTimeInput = document.getElementById(\"inputSimulationTime\");\r\n    simulationTimeInput.value = 100;\r\n\r\n    buttonStartSimulation.addEventListener(\"click\", (event) => {\r\n        let invalidElements = document.querySelectorAll(\":invalid\");\r\n        if (invalidElements.length > 0) {\r\n            invalidElements.forEach((element) => element.reportValidity());\r\n            return;\r\n        }\r\n        buttonStartSimulation.disabled = true;\r\n        startSimulation();\r\n    });\r\n}\r\n\r\nfunction startSimulation() {\r\n    updateState();\r\n    updateUI();\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        if (food[i] && i < player.combatStats.foodSlots) {\r\n            let consumable = new Consumable(food[i], triggerMap[food[i]]);\r\n            player.food[i] = consumable;\r\n        } else {\r\n            player.food[i] = null;\r\n        }\r\n\r\n        if (drinks[i] && i < player.combatStats.drinkSlots) {\r\n            let consumable = new Consumable(drinks[i], triggerMap[drinks[i]]);\r\n            player.drinks[i] = consumable;\r\n        } else {\r\n            player.drinks[i] = null;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        if (abilities[i] && player.intelligenceLevel >= abilitySlotsLevelRequirementList[i + 1]) {\r\n            let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\r\n            let ability = new Ability(abilities[i], Number(abilityLevelInput.value), triggerMap[abilities[i]]);\r\n            player.abilities[i] = ability;\r\n        } else {\r\n            player.abilities[i] = null;\r\n        }\r\n    }\r\n\r\n    let zoneSelect = document.getElementById(\"selectZone\");\r\n    let simulationTimeInput = document.getElementById(\"inputSimulationTime\");\r\n\r\n    let simulationTimeLimit = Number(simulationTimeInput.value) * ONE_HOUR;\r\n\r\n    let workerMessage = {\r\n        type: \"start_simulation\",\r\n        player: player,\r\n        zoneHrid: zoneSelect.value,\r\n        simulationTimeLimit: simulationTimeLimit,\r\n    };\r\n\r\n    worker.postMessage(workerMessage);\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Equipment Sets\r\n\r\nfunction initEquipmentSetsModal() {\r\n    let equipmentSetsModal = document.getElementById(\"equipmentSetsModal\");\r\n    equipmentSetsModal.addEventListener(\"show.bs.modal\", equipmentSetsModalShownHandler);\r\n\r\n    let equipmentSetNameInput = document.getElementById(\"inputEquipmentSetName\");\r\n    equipmentSetNameInput.addEventListener(\"input\", (event) => equipmentSetNameChangedHandler(event));\r\n\r\n    let createEquipmentSetButton = document.getElementById(\"buttonCreateNewEquipmentSet\");\r\n    createEquipmentSetButton.addEventListener(\"click\", createNewEquipmentSetHandler);\r\n}\r\n\r\nfunction equipmentSetsModalShownHandler() {\r\n    resetNewEquipmentSetControls();\r\n    updateEquipmentSetList();\r\n}\r\n\r\nfunction resetNewEquipmentSetControls() {\r\n    let equipmentSetNameInput = document.getElementById(\"inputEquipmentSetName\");\r\n    equipmentSetNameInput.value = \"\";\r\n\r\n    let createEquipmentSetButton = document.getElementById(\"buttonCreateNewEquipmentSet\");\r\n    createEquipmentSetButton.disabled = true;\r\n}\r\n\r\nfunction updateEquipmentSetList() {\r\n    let newChildren = [];\r\n    let equipmentSets = loadEquipmentSets();\r\n\r\n    for (const equipmentSetName of Object.keys(equipmentSets)) {\r\n        let row = createElement(\"div\", \"row mb-2\");\r\n\r\n        let nameCol = createElement(\"div\", \"col align-self-center\", equipmentSetName);\r\n        row.appendChild(nameCol);\r\n\r\n        let loadButtonCol = createElement(\"div\", \"col-md-auto\");\r\n        let loadButton = createElement(\"button\", \"btn btn-primary\", \"Load\");\r\n        loadButton.setAttribute(\"type\", \"button\");\r\n        loadButton.addEventListener(\"click\", (_) => loadEquipmentSetHandler(equipmentSetName));\r\n        loadButtonCol.appendChild(loadButton);\r\n        row.appendChild(loadButtonCol);\r\n\r\n        let saveButtonCol = createElement(\"div\", \"col-md-auto\");\r\n        let saveButton = createElement(\"button\", \"btn btn-primary\", \"Save\");\r\n        saveButton.setAttribute(\"type\", \"button\");\r\n        saveButton.addEventListener(\"click\", (_) => updateEquipmentSetHandler(equipmentSetName));\r\n        saveButtonCol.appendChild(saveButton);\r\n        row.appendChild(saveButtonCol);\r\n\r\n        let deleteButtonCol = createElement(\"div\", \"col-md-auto\");\r\n        let deleteButton = createElement(\"button\", \"btn btn-danger\", \"Delete\");\r\n        deleteButton.setAttribute(\"type\", \"button\");\r\n        deleteButton.addEventListener(\"click\", (_) => deleteEquipmentSetHandler(equipmentSetName));\r\n        deleteButtonCol.appendChild(deleteButton);\r\n        row.appendChild(deleteButtonCol);\r\n\r\n        newChildren.push(row);\r\n    }\r\n\r\n    let equipmentSetList = document.getElementById(\"equipmentSetList\");\r\n    equipmentSetList.replaceChildren(...newChildren);\r\n}\r\n\r\nfunction equipmentSetNameChangedHandler(event) {\r\n    let invalid = false;\r\n\r\n    if (event.target.value.length == 0) {\r\n        invalid = true;\r\n    }\r\n\r\n    let equipmentSets = loadEquipmentSets();\r\n    if (equipmentSets[event.target.value]) {\r\n        invalid = true;\r\n    }\r\n\r\n    let createEquipmentSetButton = document.getElementById(\"buttonCreateNewEquipmentSet\");\r\n    createEquipmentSetButton.disabled = invalid;\r\n}\r\n\r\nfunction createNewEquipmentSetHandler() {\r\n    let equipmentSetNameInput = document.getElementById(\"inputEquipmentSetName\");\r\n    let equipmentSetName = equipmentSetNameInput.value;\r\n\r\n    let equipmentSet = getEquipmentSetFromUI();\r\n    let equipmentSets = loadEquipmentSets();\r\n    equipmentSets[equipmentSetName] = equipmentSet;\r\n    saveEquipmentSets(equipmentSets);\r\n\r\n    resetNewEquipmentSetControls();\r\n    updateEquipmentSetList();\r\n}\r\n\r\nfunction loadEquipmentSetHandler(name) {\r\n    let equipmentSets = loadEquipmentSets();\r\n    loadEquipmentSetIntoUI(equipmentSets[name]);\r\n}\r\n\r\nfunction updateEquipmentSetHandler(name) {\r\n    let equipmentSet = getEquipmentSetFromUI();\r\n    let equipmentSets = loadEquipmentSets();\r\n    equipmentSets[name] = equipmentSet;\r\n    saveEquipmentSets(equipmentSets);\r\n}\r\n\r\nfunction deleteEquipmentSetHandler(name) {\r\n    let equipmentSets = loadEquipmentSets();\r\n    delete equipmentSets[name];\r\n    saveEquipmentSets(equipmentSets);\r\n\r\n    updateEquipmentSetList();\r\n}\r\n\r\nfunction loadEquipmentSets() {\r\n    return JSON.parse(localStorage.getItem(\"equipmentSets\")) ?? {};\r\n}\r\n\r\nfunction saveEquipmentSets(equipmentSets) {\r\n    localStorage.setItem(\"equipmentSets\", JSON.stringify(equipmentSets));\r\n}\r\n\r\nfunction getEquipmentSetFromUI() {\r\n    let equipmentSet = {\r\n        levels: {},\r\n        equipment: {},\r\n        food: {},\r\n        drinks: {},\r\n        abilities: {},\r\n        triggerMap: {},\r\n    };\r\n\r\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((skill) => {\r\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\r\n        equipmentSet.levels[skill] = Number(levelInput.value);\r\n    });\r\n\r\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"weapon\", \"off_hand\", \"pouch\"].forEach((type) => {\r\n        let equipmentSelect = document.getElementById(\"selectEquipment_\" + type);\r\n        let enhancementLevelInput = document.getElementById(\"inputEquipmentEnhancementLevel_\" + type);\r\n\r\n        equipmentSet.equipment[type] = {\r\n            equipment: equipmentSelect.value,\r\n            enhancementLevel: Number(enhancementLevelInput.value),\r\n        };\r\n    });\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        let foodSelect = document.getElementById(\"selectFood_\" + i);\r\n        equipmentSet.food[i] = foodSelect.value;\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        let drinkSelect = document.getElementById(\"selectDrink_\" + i);\r\n        equipmentSet.drinks[i] = drinkSelect.value;\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        let abilitySelect = document.getElementById(\"selectAbility_\" + i);\r\n        let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\r\n        equipmentSet.abilities[i] = {\r\n            ability: abilitySelect.value,\r\n            level: Number(abilityLevelInput.value),\r\n        };\r\n    }\r\n\r\n    equipmentSet.triggerMap = triggerMap;\r\n\r\n    return equipmentSet;\r\n}\r\n\r\nfunction loadEquipmentSetIntoUI(equipmentSet) {\r\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((skill) => {\r\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\r\n        levelInput.value = equipmentSet.levels[skill];\r\n    });\r\n\r\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"weapon\", \"off_hand\", \"pouch\"].forEach((type) => {\r\n        let equipmentSelect = document.getElementById(\"selectEquipment_\" + type);\r\n        let enhancementLevelInput = document.getElementById(\"inputEquipmentEnhancementLevel_\" + type);\r\n\r\n        equipmentSelect.value = equipmentSet.equipment[type].equipment;\r\n        enhancementLevelInput.value = equipmentSet.equipment[type].enhancementLevel;\r\n    });\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        let foodSelect = document.getElementById(\"selectFood_\" + i);\r\n        foodSelect.value = equipmentSet.food[i];\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        let drinkSelect = document.getElementById(\"selectDrink_\" + i);\r\n        drinkSelect.value = equipmentSet.drinks[i];\r\n    }\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        let abilitySelect = document.getElementById(\"selectAbility_\" + i);\r\n        let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\r\n\r\n        abilitySelect.value = equipmentSet.abilities[i].ability;\r\n        abilityLevelInput.value = equipmentSet.abilities[i].level;\r\n    }\r\n\r\n    triggerMap = equipmentSet.triggerMap;\r\n\r\n    updateState();\r\n    updateUI();\r\n}\r\n\r\n// #endregion\r\n\r\n// #region Error Handling\r\n\r\nfunction initErrorHandling() {\r\n    window.addEventListener(\"error\", (event) => {\r\n        showErrorModal(event.message);\r\n    });\r\n\r\n    let copyErrorButton = document.getElementById(\"buttonCopyError\");\r\n    copyErrorButton.addEventListener(\"click\", (event) => {\r\n        let errorInput = document.getElementById(\"inputError\");\r\n        navigator.clipboard.writeText(errorInput.value);\r\n    });\r\n}\r\n\r\nfunction showErrorModal(error) {\r\n    let zoneSelect = document.getElementById(\"selectZone\");\r\n    let simulationTimeInput = document.getElementById(\"inputSimulationTime\");\r\n\r\n    let state = {\r\n        error: error,\r\n        player: player,\r\n        food: food,\r\n        drinks: drinks,\r\n        abilities: abilities,\r\n        triggerMap: triggerMap,\r\n        modalTriggers: modalTriggers,\r\n        zone: zoneSelect.value,\r\n        simulationTime: simulationTimeInput.value,\r\n    };\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\r\n        state[\"abilityLevel\" + i] = abilityLevelInput.value;\r\n    }\r\n\r\n    let errorInput = document.getElementById(\"inputError\");\r\n    errorInput.value = JSON.stringify(state);\r\n\r\n    let errorModal = new bootstrap.Modal(document.getElementById(\"errorModal\"));\r\n    errorModal.show();\r\n}\r\n\r\n// #endregion\r\n\r\nfunction updateState() {\r\n    updateEquipmentState();\r\n    updateLevels();\r\n    updateFoodState();\r\n    updateDrinksState();\r\n    updateAbilityState();\r\n}\r\n\r\nfunction updateUI() {\r\n    updateCombatStatsUI();\r\n    updateFoodUI();\r\n    updateDrinksUI();\r\n    updateAbilityUI();\r\n}\r\n\r\ninitEquipmentSection();\r\ninitLevelSection();\r\ninitFoodSection();\r\ninitDrinksSection();\r\ninitAbilitiesSection();\r\ninitZones();\r\ninitTriggerModal();\r\ninitSimulationControls();\r\ninitEquipmentSetsModal();\r\ninitErrorHandling();\r\n\r\nupdateState();\r\nupdateUI();\r\n"],"names":[],"sourceRoot":""}