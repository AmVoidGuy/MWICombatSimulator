{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAA0B;AACkC;AAC5B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;ACrEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACZ4B;AACO;AACkB;AAChB;AACM;AACJ;AACd;AACgB;AACR;AACQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAU;AACxC;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qEAAqB;AACtC;AACA;AACA,iBAAiB,uEAAuB;AACxC;AACA;AACA,iBAAiB,sEAAsB;AACvC;AACA;AACA,iBAAiB,oEAAoB;AACrC;AACA;AACA,iBAAiB,uEAAuB;AACxC;AACA;AACA,iBAAiB,wEAAwB;AACzC;AACA;AACA,iBAAiB,6EAA6B;AAC9C;AACA;AACA,iBAAiB,mEAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kEAAyB;AAClD;AACA;AACA;AACA,wBAAwB,2EAAkC;AAC1D;AACA;AACA;AACA;AACA,qBAAqB,kEAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iEAAiB;AACzD;AACA;AACA,UAAU;AACV;AACA,yCAAyC,kEAAkB;AAC3D;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAyB;AAC9C,UAAU;AACV,qBAAqB,kEAAyB;AAC9C;AACA;AACA,kCAAkC,+DAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAyB;AACzC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,gBAAgB,kEAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,0CAA0C,mEAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wEAAwB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2EAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2EAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mEAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kEAAyB;AAC9C;AACA;AACA;AACA,6CAA6C,kEAAkB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kEAAkB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;AC1U/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAwD;AACtF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;AC5L1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;;;;AC/BL;AAC4B;AACtB;AAChC;AACA;AACA;AACA;AACA;AACA,6BAA6B,qDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;AC9D4B;AAC8C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA,yBAAyB,4EAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;ACjCe;AACxC;AACA,8BAA8B,oDAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;;;;ACbS;AACxC;AACA,uCAAuC,oDAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,wBAAwB,EAAC;;;;;;;;;;;;;;;ACZxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;ACPa;AACxC;AACA,+BAA+B,oDAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;;;ACVQ;AACxC;AACA,kCAAkC,oDAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB,EAAC;;;;;;;;;;;;;;;;ACfK;AACxC;AACA,gCAAgC,oDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;ACVjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;ACtDc;AACxC;AACA,iCAAiC,oDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;ACVM;AACxC;AACA,6BAA6B,oDAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc,EAAC;;;;;;;;;;;;;;;;ACZU;AACxC;AACA,iCAAiC,oDAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB,EAAC;;;;;;;;;;;;;;;;;ACbI;AACkC;AACxE;AACA,sBAAsB,mDAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;AChCe;AACtC;AACA,qBAAqB,mDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;ACvEsE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wEAAgiEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;AC3HmC;AAC1B;AAChC;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gDAAO;AACrE;AACA;AACA;AACA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCzCpB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCfA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;;;;;;;;;;;;;;;;;;;;;ACrBuD;AACJ;AACF;AACJ;AAC+B;AACN;AACnB;AACA;AACM;AACZ;AACsB;AACnE;AACA;AACA;AACA;AACA,gCAAgC,yGAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kEAAM;AACvB;AACA;AACA;AACA;AACA;AACA,gDAAgD,qEAAS;AACzD,gDAAgD,qEAAS;AACzD,gDAAgD,qEAAS;AACzD,gDAAgD,qEAAS;AACzD,iDAAiD,qEAAS;AAC1D,qDAAqD,qEAAS;AAC9D,oDAAoD,qEAAS;AAC7D,iDAAiD,qEAAS;AAC1D;AACA;AACA;AACA;AACA,kBAAkB,mEAAO;AACzB;AACA;AACA;AACA,eAAe,gEAAI,CAAC,uHAA+D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B,mBAAmB,mEAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mEAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B,mBAAmB,mEAAO;AAC1B;AACA;AACA;AACA,sBAAsB,sEAAU;AAChC,sBAAsB,sEAAU;AAChC,sBAAsB,sEAAU;AAChC,sBAAsB,sEAAU;AAChC;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAI;AACnB;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4EAAe;AACnC","sources":["webpack://mwicombatsimulator/./src/combatsimulator/ability.js","webpack://mwicombatsimulator/./src/combatsimulator/buff.js","webpack://mwicombatsimulator/./src/combatsimulator/combatSimulator.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUnit.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUtilities.js","webpack://mwicombatsimulator/./src/combatsimulator/consumable.js","webpack://mwicombatsimulator/./src/combatsimulator/equipment.js","webpack://mwicombatsimulator/./src/combatsimulator/events/autoAttackEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/checkBuffExpirationEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/combatEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/combatStartEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/consumableTickEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/enemyRespawnEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/eventQueue.js","webpack://mwicombatsimulator/./src/combatsimulator/events/playerRespawnEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/regenTickEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/events/useConsumableEvent.js","webpack://mwicombatsimulator/./src/combatsimulator/monster.js","webpack://mwicombatsimulator/./src/combatsimulator/player.js","webpack://mwicombatsimulator/./src/combatsimulator/trigger.js","webpack://mwicombatsimulator/./src/combatsimulator/zone.js","webpack://mwicombatsimulator/webpack/bootstrap","webpack://mwicombatsimulator/webpack/runtime/define property getters","webpack://mwicombatsimulator/webpack/runtime/get javascript chunk filename","webpack://mwicombatsimulator/webpack/runtime/global","webpack://mwicombatsimulator/webpack/runtime/hasOwnProperty shorthand","webpack://mwicombatsimulator/webpack/runtime/make namespace object","webpack://mwicombatsimulator/webpack/runtime/publicPath","webpack://mwicombatsimulator/webpack/runtime/jsonp chunk loading","webpack://mwicombatsimulator/./src/main.js"],"sourcesContent":["import Buff from \"./buff\";\r\nimport abilityDetailMap from \"./data/abilityDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Ability {\r\n    constructor(hrid, level, triggers = null) {\r\n        this.hrid = hrid;\r\n        this.level = level;\r\n\r\n        let gameAbility = abilityDetailMap[hrid];\r\n        console.assert(gameAbility, \"No ability found for hrid:\" + this.hrid);\r\n\r\n        this.manaCost = gameAbility.manaCost;\r\n        this.cooldownDuration = gameAbility.cooldownDuration;\r\n\r\n        this.abilityEffects = [];\r\n\r\n        for (const effect of gameAbility.abilityEffects) {\r\n            let abilityEffect = {\r\n                targetType: effect.targetType,\r\n                effectType: effect.effectType,\r\n                combatStyleHrid: effect.combatStyleHrid,\r\n                damageFlat: effect.baseDamageFlat + (this.level - 1) * effect.baseDamageFlatLevelBonus,\r\n                damageRation: effect.baseDamageRatio + (this.level - 1) * effect.baseDamageRatioLevelBonus,\r\n                bleedRatio: effect.bleedRatio,\r\n                duration: effect.duration,\r\n                buff: new Buff(effect.buff, this.level),\r\n            };\r\n            this.abilityEffects.push(abilityEffect);\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameAbility.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Ability;\r\n","class Buff {\r\n    startTime;\r\n\r\n    constructor(buff, level = 1) {\r\n        this.sourceHrid = buff.sourceHrid;\r\n        this.typeHrid = buff.typeHrid;\r\n        this.ratioBoost = buff.ratioBoost + (level - 1) * buff.ratioBoostLevelBonus;\r\n        this.flatBoost = buff.flatBoost + (level - 1) * buff.flatBoostLevelBonus;\r\n        this.duration = buff.duration;\r\n    }\r\n}\r\n\r\nexport default Buff;\r\n","import CombatUtilities from \"./combatUtilities\";\r\nimport AutoAttackEvent from \"./events/autoAttackEvent\";\r\nimport CheckBuffExpirationEvent from \"./events/checkBuffExpirationEvent\";\r\nimport CombatStartEvent from \"./events/combatStartEvent\";\r\nimport ConsumableTickEvent from \"./events/consumableTickEvent\";\r\nimport EnemyRespawnEvent from \"./events/enemyRespawnEvent\";\r\nimport EventQueue from \"./events/eventQueue\";\r\nimport PlayerRespawnEvent from \"./events/playerRespawnEvent\";\r\nimport RegenTickEvent from \"./events/regenTickEvent\";\r\nimport UseConsumableEvent from \"./events/useConsumableEvent\";\r\n\r\nclass CombatSimulator {\r\n    constructor(player, zone) {\r\n        this.players = [player];\r\n        this.zone = zone;\r\n\r\n        this.eventQueue = new EventQueue();\r\n    }\r\n\r\n    simulate(simulationTimeLimit) {\r\n        this.reset();\r\n\r\n        let combatStartEvent = new CombatStartEvent(0);\r\n        this.eventQueue.addEvent(combatStartEvent);\r\n\r\n        while (this.simulationTime < simulationTimeLimit) {\r\n            let nextEvent = this.eventQueue.getNextEvent();\r\n            this.processEvent(nextEvent);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.simulationTime = 0;\r\n        this.eventQueue.clear();\r\n    }\r\n\r\n    processEvent(event) {\r\n        this.simulationTime = event.time;\r\n\r\n        switch (event.type) {\r\n            case CombatStartEvent.type:\r\n                this.processCombatStartEvent(event);\r\n                break;\r\n            case PlayerRespawnEvent.type:\r\n                this.processPlayerRespawnEvent(event);\r\n                break;\r\n            case EnemyRespawnEvent.type:\r\n                this.processEnemyRespawnEvent(event);\r\n                break;\r\n            case AutoAttackEvent.type:\r\n                this.processAutoAttackEvent(event);\r\n                break;\r\n            case UseConsumableEvent.type:\r\n                this.processUseConsumableEvent(event);\r\n                break;\r\n            case ConsumableTickEvent.type:\r\n                this.processConsumableTickEvent(event);\r\n                break;\r\n            case CheckBuffExpirationEvent.type:\r\n                this.processCheckBuffExpirationEvent(event);\r\n                break;\r\n            case RegenTickEvent.type:\r\n                this.processRegenTickEvent(event);\r\n                break;\r\n        }\r\n\r\n        this.checkTriggers();\r\n    }\r\n\r\n    processCombatStartEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        this.players[0].reset();\r\n\r\n        let regenTickEvent = new RegenTickEvent(this.simulationTime + 10 * 1e9, this.players[0]);\r\n        this.eventQueue.addEvent(regenTickEvent);\r\n\r\n        this.startNewEncounter();\r\n    }\r\n\r\n    processPlayerRespawnEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        this.players[0].combatStats.currentHitpoints = this.players[0].combatStats.maxHitpoints / 2;\r\n\r\n        let regenTickEvent = new RegenTickEvent(this.simulationTime + 10 * 1e9, this.players[0]);\r\n        this.eventQueue.addEvent(regenTickEvent);\r\n\r\n        this.startNewEncounter();\r\n    }\r\n\r\n    processEnemyRespawnEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        this.startNewEncounter();\r\n    }\r\n\r\n    startNewEncounter() {\r\n        this.enemies = this.zone.getRandomEncounter();\r\n        this.enemies.forEach((enemy) => {\r\n            enemy.reset();\r\n        });\r\n\r\n        this.addNextAutoAttackEvent(this.players[0]);\r\n\r\n        this.enemies.forEach((enemy) => this.addNextAutoAttackEvent(enemy));\r\n    }\r\n\r\n    processAutoAttackEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n        console.log(\"source:\", event.source.hrid, \"target:\", event.target.hrid);\r\n\r\n        let combatStyle = event.source.combatStats.combatStyleHrid;\r\n        let maxDamage = event.source.combatStats[combatStyle + \"MaxDamage\"];\r\n        let damageRoll = CombatUtilities.randomInt(1, maxDamage);\r\n        let premitigatedDamage = Math.min(damageRoll, event.target.combatStats.currentHitpoints);\r\n\r\n        let damage = 0;\r\n        let hitChance = CombatUtilities.calculateHitChance(event.source, event.target, combatStyle);\r\n\r\n        if (Math.random() < hitChance) {\r\n            let damageTakenRatio = 100 / (100 + event.target.combatStats.armor);\r\n            let mitigatedDamage = damageTakenRatio * premitigatedDamage;\r\n            damage = CombatUtilities.randomInt(mitigatedDamage, mitigatedDamage);\r\n            event.target.combatStats.currentHitpoints -= damage;\r\n\r\n            if (event.target.combatStats.currentHitpoints == 0) {\r\n                this.eventQueue.clearEventsForUnit(event.target);\r\n            }\r\n\r\n            console.log(\"Hit for\", damage);\r\n        }\r\n\r\n        let damagePrevented = premitigatedDamage - damage;\r\n\r\n        if (event.source.isPlayer && !this.enemies.find((enemy) => enemy.combatStats.currentHitpoints > 0)) {\r\n            let enemyRespawnEvent = new EnemyRespawnEvent(this.simulationTime + 3 * 1e9);\r\n            this.eventQueue.addEvent(enemyRespawnEvent);\r\n            this.enemies = null;\r\n        } else if (!event.source.isPlayer && !this.players.find((player) => player.combatStats.currentHitpoints > 0)) {\r\n            // 120 seconds respawn and 30 seconds traveling to battle\r\n            let playerRespawnEvent = new PlayerRespawnEvent(this.simulationTime + 150 * 1e9);\r\n            this.eventQueue.addEvent(playerRespawnEvent);\r\n        } else {\r\n            this.addNextAutoAttackEvent(event.source);\r\n        }\r\n    }\r\n\r\n    addNextAutoAttackEvent(source) {\r\n        let target;\r\n        if (source.isPlayer) {\r\n            target = CombatUtilities.getTarget(this.enemies);\r\n        } else {\r\n            target = CombatUtilities.getTarget(this.players);\r\n        }\r\n\r\n        let autoAttackEvent = new AutoAttackEvent(\r\n            this.simulationTime + source.combatStats.attackInterval,\r\n            source,\r\n            target\r\n        );\r\n        this.eventQueue.addEvent(autoAttackEvent);\r\n    }\r\n\r\n    processUseConsumableEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        console.assert(event.source.combatStats.currentHitpoints > 0, \"Dead unit is trying to use a consumable\");\r\n\r\n        let source = event.source;\r\n        let consumable = event.consumable;\r\n\r\n        let triggerActive;\r\n        if (source.isPlayer) {\r\n            triggerActive = consumable.shouldTrigger(\r\n                this.simulationTime,\r\n                source,\r\n                CombatUtilities.getTarget(this.enemies),\r\n                this.players,\r\n                this.enemies\r\n            );\r\n        } else {\r\n            triggerActive = consumable.shouldTrigger(\r\n                this.simulationTime,\r\n                source,\r\n                CombatUtilities.getTarget(this.players),\r\n                this.enemies,\r\n                this.players\r\n            );\r\n        }\r\n\r\n        if (!triggerActive) {\r\n            return;\r\n        }\r\n\r\n        consumable.lastUsed = this.simulationTime;\r\n\r\n        if (consumable.recoveryDuration == 0) {\r\n            if (consumable.hitpointRestore > 0) {\r\n                let hitpointsAdded = source.addHitpoints(consumable.hitpointRestore);\r\n                console.log(\"Added hitpoints:\", hitpointsAdded);\r\n            }\r\n\r\n            if (consumable.manapointRestore > 0) {\r\n                let manapointsAdded = source.addManapoints(consumable.manapointRestore);\r\n                console.log(\"Added manapoints:\", manapointsAdded);\r\n            }\r\n        } else {\r\n            let consumableTickEvent = new ConsumableTickEvent(\r\n                this.simulationTime + 2 * 1e9,\r\n                source,\r\n                consumable,\r\n                consumable.recoveryDuration / (2 * 1e9),\r\n                1\r\n            );\r\n            this.eventQueue.addEvent(consumableTickEvent);\r\n        }\r\n\r\n        for (const buff of consumable.buffs) {\r\n            source.addBuff(buff, this.simulationTime);\r\n            console.log(\"Added buff:\", buff);\r\n            let checkBuffExpirationEvent = new CheckBuffExpirationEvent(\r\n                this.simulationTime + buff.duration,\r\n                event.source\r\n            );\r\n            this.eventQueue.addEvent(checkBuffExpirationEvent);\r\n        }\r\n    }\r\n\r\n    processConsumableTickEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        if (event.consumable.hitpointRestore > 0) {\r\n            let tickValue = CombatUtilities.calculateTickValue(\r\n                event.consumable.hitpointRestore,\r\n                event.totalTicks,\r\n                event.currentTick\r\n            );\r\n            let hitpointsAdded = event.source.addHitpoints(tickValue);\r\n            console.log(\"Added hitpoints:\", hitpointsAdded);\r\n        }\r\n\r\n        if (event.consumable.manapointRestore > 0) {\r\n            let tickValue = CombatUtilities.calculateTickValue(\r\n                event.consumable.manapointRestore,\r\n                event.totalTicks,\r\n                event.currentTick\r\n            );\r\n            let manapointsAdded = event.source.addManapoints(tickValue);\r\n            console.log(\"Added manapoints:\", manapointsAdded);\r\n        }\r\n\r\n        if (event.currentTick < event.totalTicks) {\r\n            let consumableTickEvent = new ConsumableTickEvent(\r\n                this.simulationTime + 2 * 1e9,\r\n                event.source,\r\n                event.consumable,\r\n                event.totalTicks,\r\n                event.currentTick + 1\r\n            );\r\n            this.eventQueue.addEvent(consumableTickEvent);\r\n        }\r\n    }\r\n\r\n    processRegenTickEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        let hitpointRegen = Math.floor(event.source.combatStats.maxHitpoints * event.source.combatStats.HPRegen);\r\n        let hitpointsAdded = event.source.addHitpoints(hitpointRegen);\r\n        console.log(\"Added hitpoints:\", hitpointsAdded);\r\n\r\n        let manapointRegen = Math.floor(event.source.combatStats.maxManapoints * event.source.combatStats.MPRegen);\r\n        let manapointsAdded = event.source.addManapoints(manapointRegen);\r\n        console.log(\"Added manapoints:\", manapointsAdded);\r\n\r\n        let regenTickEvent = new RegenTickEvent(this.simulationTime + 10 * 1e9, event.source);\r\n        this.eventQueue.addEvent(regenTickEvent);\r\n    }\r\n\r\n    processCheckBuffExpirationEvent(event) {\r\n        console.log(this.simulationTime / 1e9, event.type, event);\r\n\r\n        event.source.removeExpiredBuffs(this.simulationTime);\r\n    }\r\n\r\n    checkTriggers() {\r\n        this.players\r\n            .filter((player) => player.combatStats.currentHitpoints > 0)\r\n            .forEach((player) => this.checkTriggersForUnit(player, this.players, this.enemies));\r\n\r\n        if (this.enemies) {\r\n            this.enemies\r\n                .filter((enemy) => enemy.combatStats.currentHitpoints > 0)\r\n                .forEach((enemy) => this.checkTriggersForUnit(enemy, this.enemies, this.players));\r\n        }\r\n    }\r\n\r\n    checkTriggersForUnit(unit, friendlies, enemies) {\r\n        console.assert(unit.combatStats.currentHitpoints > 0, \"Checking triggers for a dead unit\");\r\n\r\n        let target = CombatUtilities.getTarget(enemies);\r\n\r\n        for (const food of unit.food) {\r\n            if (food && food.shouldTrigger(this.simulationTime, unit, target, friendlies, enemies)) {\r\n                let useConsumableEvent = new UseConsumableEvent(this.simulationTime, unit, food);\r\n                if (!this.eventQueue.containsEvent(useConsumableEvent)) {\r\n                    this.eventQueue.addEvent(useConsumableEvent);\r\n                    console.log(\"adding food event:\", useConsumableEvent);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const drink of unit.drinks) {\r\n            if (drink && drink.shouldTrigger(this.simulationTime, unit, target, friendlies, enemies)) {\r\n                let useConsumableEvent = new UseConsumableEvent(this.simulationTime, unit, drink);\r\n                if (!this.eventQueue.containsEvent(useConsumableEvent)) {\r\n                    this.eventQueue.addEvent(useConsumableEvent);\r\n                    console.log(\"adding drink event:\", useConsumableEvent);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const ability of unit.abilities) {\r\n            if (ability && ability.shouldTrigger(this.simulationTime, unit, target, friendlies, enemies)) {\r\n                // Add event\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default CombatSimulator;\r\n","class CombatUnit {\r\n    isPlayer;\r\n\r\n    // Base levels which don't change after initialization\r\n    staminaLevel = 1;\r\n    intelligenceLevel = 1;\r\n    attackLevel = 1;\r\n    powerLevel = 1;\r\n    defenseLevel = 1;\r\n\r\n    abilities = [null, null, null, null];\r\n    food = [null, null, null];\r\n    drinks = [null, null, null];\r\n\r\n    // Calculated combat stats including temporary buffs\r\n    combatStats = {\r\n        combatStyleHrid: \"smash\",\r\n        attackInterval: 3000000000,\r\n        stabAccuracy: 0,\r\n        slashAccuracy: 0,\r\n        smashAccuracy: 0,\r\n        stabDamage: 0,\r\n        slashDamage: 0,\r\n        smashDamage: 0,\r\n        stabEvasion: 0,\r\n        slashEvasion: 0,\r\n        smashEvasion: 0,\r\n        armor: 0,\r\n        lifeSteal: 0,\r\n        HPRegen: 0.005,\r\n        MPRegen: 0.01,\r\n        dropRate: 0,\r\n        foodSlots: 1,\r\n        drinkSlots: 0,\r\n        staminaLevel: 1,\r\n        intelligenceLevel: 1,\r\n        attackLevel: 1,\r\n        powerLevel: 1,\r\n        defenseLevel: 1,\r\n        maxHitpoints: 110,\r\n        currentHitpoints: 110,\r\n        maxManapoints: 110,\r\n        currentManapoints: 110,\r\n        stabAccuracyRating: 11,\r\n        slashAccuracyRating: 11,\r\n        smashAccuracyRating: 11,\r\n        stabMaxDamage: 11,\r\n        slashMaxDamage: 11,\r\n        smashMaxDamage: 11,\r\n        stabEvasionRating: 11,\r\n        slashEvasionRating: 11,\r\n        smashEvasionRating: 11,\r\n    };\r\n    combatBuffs = {};\r\n\r\n    constructor() {}\r\n\r\n    updateCombatStats() {\r\n        [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\"].forEach((stat) => {\r\n            this.combatStats[stat + \"Level\"] = this[stat + \"Level\"];\r\n            let boosts = this.getBuffBoosts(\"/buff_types/\" + stat + \"_level\");\r\n            boosts.forEach((buff) => {\r\n                this.combatStats[stat + \"Level\"] += Math.floor(this[stat + \"Level\"] * buff.ratioBoost);\r\n                this.combatStats[stat + \"Level\"] += buff.flatBoost;\r\n            });\r\n        });\r\n\r\n        this.combatStats.maxHitpoints = 10 * (10 + this.combatStats.staminaLevel);\r\n        this.combatStats.maxManapoints = 10 * (10 + this.combatStats.intelligenceLevel);\r\n\r\n        let accuracyBoosts = this.getBuffBoosts(\"/buff_types/accuracy\");\r\n        let accuracyRatioBoost = accuracyBoosts[0]?.ratioBoost ?? 0;\r\n        console.assert(accuracyBoosts.length <= 1, \"Multiple accuracy buffs active\");\r\n\r\n        let damageBoosts = this.getBuffBoosts(\"/buff_types/damage\");\r\n        let damageRatioBoost = damageBoosts[0]?.ratioBoost ?? 0;\r\n        console.assert(damageBoosts.length <= 1, \"Multiple damage buffs active\");\r\n\r\n        [\"stab\", \"slash\", \"smash\"].forEach((style) => {\r\n            this.combatStats[style + \"AccuracyRating\"] =\r\n                (10 + this.combatStats.attackLevel) *\r\n                (1 + this.combatStats[style + \"Accuracy\"]) *\r\n                (1 + accuracyRatioBoost);\r\n            this.combatStats[style + \"MaxDamage\"] =\r\n                (10 + this.combatStats.powerLevel) * (1 + this.combatStats[style + \"Damage\"]) * (1 + damageRatioBoost);\r\n            this.combatStats[style + \"EvasionRating\"] =\r\n                (10 + this.combatStats.defenseLevel) * (1 + this.combatStats[style + \"Evasion\"]);\r\n        });\r\n\r\n        // TODO: Test how frenzy and swiftness coffee stack\r\n        let attackIntervalBoosts = this.getBuffBoosts(\"/buff_types/attack_speed\");\r\n        let attackIntervalRatioBoost = attackIntervalBoosts\r\n            .map((boost) => boost.ratioBoost)\r\n            .reduce((prev, cur) => prev + cur, 0);\r\n        this.combatStats.attackInterval = this.combatStats.attackInterval * (1 / (1 + attackIntervalRatioBoost));\r\n\r\n        let armorBoosts = this.getBuffBoosts(\"/buff_types/armor\");\r\n        let armorFlatBoost = armorBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.armor += armorFlatBoost;\r\n        console.assert(armorBoosts.length <= 1, \"Multiple armor buffs active\");\r\n\r\n        let lifeStealBoosts = this.getBuffBoosts(\"/buff_types/life_steal\");\r\n        let lifeStealFlatBoost = lifeStealBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.lifeSteal += lifeStealFlatBoost;\r\n        console.assert(lifeStealBoosts.length <= 1, \"Multiple life steal buffs active\");\r\n\r\n        let HPRegenBoosts = this.getBuffBoosts(\"/buff_types/hp_regen\");\r\n        let HPRegenFlatBoost = HPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.HPRegen += HPRegenFlatBoost;\r\n        console.assert(HPRegenBoosts.length <= 1, \"Multiple hp regen buffs active\");\r\n\r\n        let MPRegenBoosts = this.getBuffBoosts(\"/buff_types/mp_regen\");\r\n        let MPRegenFlatBoost = MPRegenBoosts[0]?.flatBoost ?? 0;\r\n        this.combatStats.MPRegen += MPRegenFlatBoost;\r\n        console.assert(MPRegenBoosts.length <= 1, \"Multiple mp regen buffs active\");\r\n\r\n        let dropRateBoosts = this.getBuffBoosts(\"/buff_types/combat_drop_rate\");\r\n        let dropRateRatioBoost = dropRateBoosts[0]?.ratioBoost ?? 0;\r\n        this.combatStats.dropRate += dropRateRatioBoost;\r\n        console.assert(dropRateBoosts.length <= 1, \"Multiple drop rate buffs active\");\r\n    }\r\n\r\n    addBuff(buff, currentTime) {\r\n        buff.startTime = currentTime;\r\n        this.combatBuffs[buff.sourceHrid] = buff;\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    removeExpiredBuffs(currentTime) {\r\n        let expiredBuffs = Object.values(this.combatBuffs).filter(\r\n            (buff) => buff.startTime + buff.duration <= currentTime\r\n        );\r\n        expiredBuffs.forEach((buff) => {\r\n            delete this.combatBuffs[buff.sourceHrid];\r\n        });\r\n\r\n        this.updateCombatStats();\r\n    }\r\n\r\n    getBuffBoosts(type) {\r\n        let boosts = [];\r\n        Object.values(this.combatBuffs)\r\n            .filter((buff) => buff.typeHrid == type)\r\n            .forEach((buff) => {\r\n                boosts.push({ ratioBoost: buff.ratioBoost, flatBoost: buff.flatBoost });\r\n            });\r\n\r\n        return boosts;\r\n    }\r\n\r\n    reset() {\r\n        this.combatBuffs = {};\r\n        this.updateCombatStats();\r\n\r\n        this.combatStats.currentHitpoints = this.combatStats.maxHitpoints;\r\n        this.combatStats.currentManapoints = this.combatStats.maxManapoints;\r\n    }\r\n\r\n    addHitpoints(hitpoints) {\r\n        let hitpointsAdded = 0;\r\n\r\n        if (this.combatStats.currentHitpoints >= this.combatStats.maxHitpoints) {\r\n            return hitpointsAdded;\r\n        }\r\n\r\n        let newHitpoints = Math.min(this.combatStats.currentHitpoints + hitpoints, this.combatStats.maxHitpoints);\r\n        hitpointsAdded = newHitpoints - this.combatStats.currentHitpoints;\r\n        this.combatStats.currentHitpoints = newHitpoints;\r\n\r\n        return hitpointsAdded;\r\n    }\r\n\r\n    addManapoints(manapoints) {\r\n        let manapointsAdded = 0;\r\n\r\n        if (this.combatStats.currentManapoints >= this.combatStats.maxManapoints) {\r\n            return manapointsAdded;\r\n        }\r\n\r\n        let newManapoints = Math.min(this.combatStats.currentManapoints + manapoints, this.combatStats.maxManapoints);\r\n        manapointsAdded = newManapoints - this.combatStats.currentManapoints;\r\n        this.combatStats.currentManapoints = newManapoints;\r\n\r\n        return manapointsAdded;\r\n    }\r\n}\r\n\r\nexport default CombatUnit;\r\n","class CombatUtilities {\r\n    static getTarget(enemies) {\r\n        if (!enemies) {\r\n            return null;\r\n        }\r\n        let target = enemies.find((enemy) => enemy.combatStats.currentHitpoints > 0);\r\n\r\n        return target ?? null;\r\n    }\r\n\r\n    static randomInt(min, max) {\r\n        return Math.floor(min + Math.random() * (max - min + 1));\r\n    }\r\n\r\n    static calculateHitChance(source, target, combatStyle) {\r\n        let sourceAccuracy = source.combatStats[combatStyle + \"AccuracyRating\"];\r\n        let targetEvasion = target.combatStats[combatStyle + \"EvasionRating\"];\r\n\r\n        let hitChance = Math.pow(sourceAccuracy, 1.4) / (Math.pow(sourceAccuracy, 1.4) + Math.pow(targetEvasion, 1.4));\r\n\r\n        return hitChance;\r\n    }\r\n\r\n    static calculateTickValue(totalValue, totalTicks, currentTick) {\r\n        let currentSum = Math.floor((currentTick * totalValue) / totalTicks);\r\n        let previousSum = Math.floor(((currentTick - 1) * totalValue) / totalTicks);\r\n\r\n        return currentSum - previousSum;\r\n    }\r\n}\r\n\r\nexport default CombatUtilities;\r\n","import Buff from \"./buff\";\r\nimport itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport Trigger from \"./trigger\";\r\n\r\nclass Consumable {\r\n    constructor(hrid, triggers = null) {\r\n        this.hrid = hrid;\r\n\r\n        let gameConsumable = itemDetailMap[this.hrid];\r\n        console.assert(gameConsumable, \"No consumable found for hrid:\" + this.hrid);\r\n\r\n        this.cooldownDuration = gameConsumable.consumableDetail.cooldownDuration;\r\n        this.hitpointRestore = gameConsumable.consumableDetail.hitpointRestore;\r\n        this.manapointRestore = gameConsumable.consumableDetail.manapointRestore;\r\n        this.recoveryDuration = gameConsumable.consumableDetail.recoveryDuration;\r\n\r\n        this.buffs = [];\r\n        if (gameConsumable.consumableDetail.buffs) {\r\n            for (const consumableBuff of gameConsumable.consumableDetail.buffs) {\r\n                let buff = new Buff(consumableBuff);\r\n                this.buffs.push(buff);\r\n            }\r\n        }\r\n\r\n        if (triggers) {\r\n            this.triggers = triggers;\r\n        } else {\r\n            this.triggers = [];\r\n            for (const defaultTrigger of gameConsumable.consumableDetail.defaultCombatTriggers) {\r\n                let trigger = new Trigger(\r\n                    defaultTrigger.dependencyHrid,\r\n                    defaultTrigger.conditionHrid,\r\n                    defaultTrigger.comparatorHrid,\r\n                    defaultTrigger.value\r\n                );\r\n                this.triggers.push(trigger);\r\n            }\r\n        }\r\n\r\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\r\n    }\r\n\r\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\r\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\r\n            return false;\r\n        }\r\n\r\n        if (this.triggers.length == 0) {\r\n            return true;\r\n        }\r\n\r\n        let shouldTrigger = true;\r\n        for (const trigger of this.triggers) {\r\n            if (!trigger.isActive(source, target, friendlies, enemies)) {\r\n                shouldTrigger = false;\r\n            }\r\n        }\r\n\r\n        return shouldTrigger;\r\n    }\r\n}\r\n\r\nexport default Consumable;\r\n","import itemDetailMap from \"./data/itemDetailMap.json\";\r\nimport enhancementLevelTotalMultiplierTable from \"./data/enhancementLevelTotalMultiplierTable.json\";\r\n\r\nclass Equipment {\r\n    constructor(hrid, enhancementLevel) {\r\n        this.hrid = hrid;\r\n        this.enhancementLevel = enhancementLevel;\r\n    }\r\n\r\n    getCombatStat(combatStat) {\r\n        let gameItem = itemDetailMap[this.hrid];\r\n        console.assert(gameItem, \"No equipment found for hrid:\" + this.hrid);\r\n\r\n        let multiplier = enhancementLevelTotalMultiplierTable[this.enhancementLevel];\r\n\r\n        let stat =\r\n            gameItem.equipmentDetail.combatStats[combatStat] +\r\n            multiplier * gameItem.equipmentDetail.combatEnhancementBonuses[combatStat];\r\n\r\n        return stat;\r\n    }\r\n\r\n    getCombatStyle() {\r\n        let gameItem = itemDetailMap[this.hrid];\r\n        console.assert(gameItem, \"No equipment found for hrid:\" + this.hrid);\r\n\r\n        let gameCombatStyle = gameItem.equipmentDetail.combatStyleHrids[0];\r\n        let combatStyle = gameCombatStyle.slice(gameCombatStyle.lastIndexOf(\"/\") + 1);\r\n\r\n        return combatStyle;\r\n    }\r\n}\r\n\r\nexport default Equipment;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass AutoAttackEvent extends CombatEvent {\r\n    static type = \"autoAttack\";\r\n\r\n    constructor(time, source, target) {\r\n        super(AutoAttackEvent.type, time);\r\n\r\n        this.source = source;\r\n        this.target = target;\r\n    }\r\n}\r\n\r\nexport default AutoAttackEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass CheckBuffExpirationEvent extends CombatEvent {\r\n    static type = \"checkBuffExpiration\";\r\n\r\n    constructor(time, source) {\r\n        super(CheckBuffExpirationEvent.type, time);\r\n\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport default CheckBuffExpirationEvent;\r\n","class CombatEvent {\r\n    constructor(type, time) {\r\n        this.type = type;\r\n        this.time = time;\r\n    }\r\n}\r\n\r\nexport default CombatEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass CombatStartEvent extends CombatEvent {\r\n    static type = \"combatStart\";\r\n\r\n    constructor(time) {\r\n        super(CombatStartEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default CombatStartEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass ConsumableTickEvent extends CombatEvent {\r\n    static type = \"consumableTick\";\r\n\r\n    constructor(time, source, consumable, totalTicks, currentTick) {\r\n        super(ConsumableTickEvent.type, time);\r\n\r\n        this.source = source;\r\n        this.consumable = consumable;\r\n        this.totalTicks = totalTicks;\r\n        this.currentTick = currentTick;\r\n    }\r\n}\r\n\r\nexport default ConsumableTickEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass EnemyRespawnEvent extends CombatEvent {\r\n    static type = \"enemyRespawn\";\r\n\r\n    constructor(time) {\r\n        super(EnemyRespawnEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default EnemyRespawnEvent;\r\n","class EventQueue {\r\n    constructor() {\r\n        // TODO: Replace with heap and check performance\r\n        this.queue = [];\r\n    }\r\n\r\n    addEvent(event) {\r\n        this.queue.push(event);\r\n    }\r\n\r\n    getNextEvent() {\r\n        this.queue.sort((a, b) => a.time - b.time);\r\n\r\n        return this.queue.shift();\r\n    }\r\n\r\n    clear() {\r\n        this.queue = [];\r\n    }\r\n\r\n    clearEventsForUnit(unit) {\r\n        let clearedQueue = [];\r\n\r\n        for (let i = 0; i < this.queue.length; i++) {\r\n            let event = this.queue[i];\r\n\r\n            if (event.source == unit || event.target == unit) {\r\n                continue;\r\n            }\r\n\r\n            clearedQueue.push(event);\r\n        }\r\n\r\n        this.queue = clearedQueue;\r\n    }\r\n\r\n    containsEvent(event) {\r\n        for (const queueEvent of this.queue.filter((e) => e.type == event.type)) {\r\n            let equal = true;\r\n            for (const key in queueEvent) {\r\n                if (event[key] != queueEvent[key]) {\r\n                    equal = false;\r\n                }\r\n            }\r\n\r\n            if (equal) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default EventQueue;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass PlayerRespawnEvent extends CombatEvent {\r\n    static type = \"playerRespawn\";\r\n\r\n    constructor(time) {\r\n        super(PlayerRespawnEvent.type, time);\r\n    }\r\n}\r\n\r\nexport default PlayerRespawnEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass RegenTickEvent extends CombatEvent {\r\n    static type = \"regenTick\";\r\n\r\n    constructor(time, source) {\r\n        super(RegenTickEvent.type, time);\r\n\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport default RegenTickEvent;\r\n","import CombatEvent from \"./combatEvent\";\r\n\r\nclass UseConsumableEvent extends CombatEvent {\r\n    static type = \"useConsumable\";\r\n\r\n    constructor(time, source, consumable) {\r\n        super(UseConsumableEvent.type, time);\r\n\r\n        this.source = source;\r\n        this.consumable = consumable;\r\n    }\r\n}\r\n\r\nexport default UseConsumableEvent;\r\n","import CombatUnit from \"./combatUnit\";\r\nimport combatMonsterDetailMap from \"./data/combatMonsterDetailMap.json\";\r\n\r\nclass Monster extends CombatUnit {\r\n    constructor(hrid) {\r\n        super();\r\n\r\n        this.isPlayer = false;\r\n        this.hrid = hrid;\r\n    }\r\n\r\n    updateCombatStats() {\r\n        let gameMonster = combatMonsterDetailMap[this.hrid];\r\n        console.assert(gameMonster, \"No monster found for hrid:\" + this.hrid);\r\n\r\n        this.staminaLevel = gameMonster.combatDetails.staminaLevel;\r\n        this.intelligenceLevel = gameMonster.combatDetails.intelligenceLevel;\r\n        this.attackLevel = gameMonster.combatDetails.attackLevel;\r\n        this.powerLevel = gameMonster.combatDetails.powerLevel;\r\n        this.defenseLevel = gameMonster.combatDetails.defenseLevel;\r\n\r\n        let gameCombatStyle = gameMonster.combatDetails.combatStyleHrid;\r\n        this.combatStats.combatStyleHrid = gameCombatStyle.slice(gameCombatStyle.lastIndexOf(\"/\") + 1);\r\n\r\n        for (const [key, value] of Object.entries(gameMonster.combatDetails.combatStats)) {\r\n            this.combatStats[key] = value;\r\n        }\r\n\r\n        super.updateCombatStats();\r\n    }\r\n}\r\n\r\nexport default Monster;\r\n","import CombatUnit from \"./combatUnit\";\r\n\r\nclass Player extends CombatUnit {\r\n    equipment = {\r\n        \"/equipment_types/head\": null,\r\n        \"/equipment_types/body\": null,\r\n        \"/equipment_types/legs\": null,\r\n        \"/equipment_types/feet\": null,\r\n        \"/equipment_types/hands\": null,\r\n        \"/equipment_types/main_hand\": null,\r\n        \"/equipment_types/two_hand\": null,\r\n        \"/equipment_types/off_hand\": null,\r\n        \"/equipment_types/pouch\": null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.isPlayer = true;\r\n        this.hrid = \"player\";\r\n    }\r\n\r\n    updateCombatStats() {\r\n        if (this.equipment[\"/equipment_types/main_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/main_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStat(\"attackInterval\");\r\n        } else if (this.equipment[\"/equipment_types/two_hand\"]) {\r\n            this.combatStats.combatStyleHrid = this.equipment[\"/equipment_types/two_hand\"].getCombatStyle();\r\n            this.combatStats.attackInterval =\r\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStat(\"attackInterval\");\r\n        } else {\r\n            this.combatStats.combatStyleHrid = \"smash\";\r\n            this.combatStats.attackInterval = 3000000000;\r\n        }\r\n\r\n        [\r\n            \"stabAccuracy\",\r\n            \"slashAccuracy\",\r\n            \"smashAccuracy\",\r\n            \"stabDamage\",\r\n            \"slashDamage\",\r\n            \"smashDamage\",\r\n            \"stabEvasion\",\r\n            \"slashEvasion\",\r\n            \"smashEvasion\",\r\n            \"armor\",\r\n            \"lifeSteal\",\r\n        ].forEach((stat) => {\r\n            this.combatStats[stat] = Object.values(this.equipment)\r\n                .filter((equipment) => equipment != null)\r\n                .map((equipment) => equipment.getCombatStat(stat))\r\n                .reduce((prev, cur) => prev + cur, 0);\r\n        });\r\n\r\n        if (this.equipment[\"/equipment_types/pouch\"]) {\r\n            this.combatStats.foodSlots = 1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"foodSlots\");\r\n            this.combatStats.drinkSlots = this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"drinkSlots\");\r\n        } else {\r\n            this.combatStats.foodSlots = 1;\r\n            this.combatStats.drinkSlots = 0;\r\n        }\r\n\r\n        this.combatStats.HPRegen = 0.005;\r\n        this.combatStats.MPRegen = 0.01;\r\n        this.combatStats.dropRate = 0;\r\n\r\n        super.updateCombatStats();\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import combatTriggerDependencyDetailMap from \"./data/combatTriggerDependencyDetailMap.json\";\r\n\r\nclass Trigger {\r\n    constructor(dependencyHrid, conditionHrid, comparatorHrid, value = 0) {\r\n        this.dependencyHrid = dependencyHrid;\r\n        this.conditionHrid = conditionHrid;\r\n        this.comparatorHrid = comparatorHrid;\r\n        this.value = value;\r\n    }\r\n\r\n    isActive(source, target, friendlies, enemies) {\r\n        if (combatTriggerDependencyDetailMap[this.dependencyHrid].isSingleTarget) {\r\n            return this.isActiveSingleTarget(source, target);\r\n        } else {\r\n            return this.isActiveMultiTarget(friendlies, enemies);\r\n        }\r\n    }\r\n\r\n    isActiveSingleTarget(source, target) {\r\n        let dependencyValue;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/self\":\r\n                dependencyValue = this.getDependencyValue(source);\r\n                break;\r\n            case \"/combat_trigger_dependencies/targeted_enemy\":\r\n                if (!target) {\r\n                    return false;\r\n                }\r\n                dependencyValue = this.getDependencyValue(target);\r\n                break;\r\n            default:\r\n                console.error(\"Unknown dependencyHrid:\", this.dependencyHrid);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    isActiveMultiTarget(friendlies, enemies) {\r\n        let dependency;\r\n        switch (this.dependencyHrid) {\r\n            case \"/combat_trigger_dependencies/all_allies\":\r\n                dependency = friendlies;\r\n                break;\r\n            case \"/combat_trigger_dependencies/all_enemies\":\r\n                if (!enemies) {\r\n                    return false;\r\n                }\r\n                dependency = enemies;\r\n                break;\r\n            default:\r\n                console.error(\"Unknown dependencyHrid:\", this.dependencyHrid);\r\n                break;\r\n        }\r\n\r\n        let dependencyValue;\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/number_of_active_units\":\r\n                dependencyValue = dependency.filter((unit) => unit.combatStats.currentHitpoints > 0).length;\r\n                break;\r\n            default:\r\n                dependencyValue = dependency\r\n                    .map((unit) => this.getDependencyValue(unit))\r\n                    .reduce((prev, cur) => prev + cur, 0);\r\n                break;\r\n        }\r\n\r\n        return this.compareValue(dependencyValue);\r\n    }\r\n\r\n    getDependencyValue(source) {\r\n        switch (this.conditionHrid) {\r\n            case \"/combat_trigger_conditions/attack_coffee\":\r\n            case \"/combat_trigger_conditions/berserk\":\r\n            case \"/combat_trigger_conditions/defense_coffee\":\r\n            case \"/combat_trigger_conditions/frenzy\":\r\n            case \"/combat_trigger_conditions/intelligence_coffee\":\r\n            case \"/combat_trigger_conditions/lucky_coffee\":\r\n            case \"/combat_trigger_conditions/power_coffee\":\r\n            case \"/combat_trigger_conditions/precision\":\r\n            case \"/combat_trigger_conditions/stamina_coffee\":\r\n            case \"/combat_trigger_conditions/super_attack_coffee\":\r\n            case \"/combat_trigger_conditions/super_defense_coffee\":\r\n            case \"/combat_trigger_conditions/super_intelligence_coffee\":\r\n            case \"/combat_trigger_conditions/super_power_coffee\":\r\n            case \"/combat_trigger_conditions/super_stamina_coffee\":\r\n            case \"/combat_trigger_conditions/swiftness_coffee\":\r\n            case \"/combat_trigger_conditions/toughness\":\r\n            case \"/combat_trigger_conditions/vampirism\":\r\n                let buffHrid = \"/buff_sources\";\r\n                buffHrid += this.conditionHrid.slice(this.conditionHrid.lastIndexOf(\"/\"));\r\n                return source.combatBuffs[buffHrid];\r\n            case \"/combat_trigger_conditions/current_hp\":\r\n                return source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/current_mp\":\r\n                return source.combatStats.currentManapoints;\r\n            case \"/combat_trigger_conditions/missing_hp\":\r\n                return source.combatStats.maxHitpoints - source.combatStats.currentHitpoints;\r\n            case \"/combat_trigger_conditions/missing_mp\":\r\n                return source.combatStats.maxManapoints - source.combatStats.currentManapoints;\r\n            default:\r\n                console.error(\"Unknown conditionHrid:\", this.conditionHrid);\r\n                break;\r\n        }\r\n    }\r\n\r\n    compareValue(dependencyValue) {\r\n        switch (this.comparatorHrid) {\r\n            case \"/combat_trigger_comparators/greater_than_equal\":\r\n                return dependencyValue >= this.value;\r\n            case \"/combat_trigger_comparators/less_than_equal\":\r\n                return dependencyValue <= this.value;\r\n            case \"/combat_trigger_comparators/is_active\":\r\n                return !!dependencyValue;\r\n            case \"/combat_trigger_comparators/is_inactive\":\r\n                return !dependencyValue;\r\n            default:\r\n                console.error(\"Unknown comparatorHrid\");\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Trigger;\r\n","import actionDetailMap from \"./data/actionDetailMap.json\";\r\nimport Monster from \"./monster\";\r\n\r\nclass Zone {\r\n    constructor(hrid) {\r\n        this.hrid = hrid;\r\n\r\n        let gameZone = actionDetailMap[this.hrid];\r\n        this.monsterSpawnRates = gameZone.monsterSpawnRates;\r\n\r\n        let totalProbability = this.monsterSpawnRates\r\n            .map((encounter) => encounter.rate * 100) // Avoid floating point inaccuracies\r\n            .reduce((prev, cur) => prev + cur, 0);\r\n        console.assert(\r\n            totalProbability / 100 == 1,\r\n            \"Encounter probabilities do not add up to 1. Zone: \" + this.hrid + \" Probability:\" + totalProbability\r\n        );\r\n    }\r\n\r\n    getRandomEncounter() {\r\n        let encounter = null;\r\n        let cumulativeProbability = 0;\r\n        let randomNumber = Math.random();\r\n\r\n        for (let i = 0; i < this.monsterSpawnRates.length; i++) {\r\n            cumulativeProbability += this.monsterSpawnRates[i].rate;\r\n            if (cumulativeProbability > randomNumber) {\r\n                encounter = this.monsterSpawnRates[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        // This could happen very rarely due to floating point inaccuracies\r\n        if (encounter == null) {\r\n            encounter = this.monsterSpawnRates[this.monsterSpawnRates.length - 1];\r\n        }\r\n\r\n        return encounter.combatMonsterHrids.map((hrid) => new Monster(hrid));\r\n    }\r\n}\r\n\r\nexport default Zone;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","import Equipment from \"./combatsimulator/equipment.js\";\r\nimport Monster from \"./combatsimulator/monster.js\";\r\nimport Player from \"./combatsimulator/player.js\";\r\nimport Buff from \"./combatsimulator/buff.js\";\r\nimport abilityDetailMap from \"./combatsimulator/data/abilityDetailMap.json\";\r\nimport itemDetailMap from \"./combatsimulator/data/itemDetailMap.json\";\r\nimport Trigger from \"./combatsimulator/trigger.js\";\r\nimport Ability from \"./combatsimulator/ability.js\";\r\nimport Consumable from \"./combatsimulator/consumable.js\";\r\nimport Zone from \"./combatsimulator/zone.js\";\r\nimport CombatSimulator from \"./combatsimulator/combatSimulator.js\";\r\n\r\nlet button = document.querySelector(\"#button1\");\r\nlet input = document.querySelector(\"#input1\");\r\n\r\nlet worker = new Worker(new URL(\"worker.js\", import.meta.url));\r\n\r\nbutton.onclick = function () {\r\n    worker.postMessage(input.value);\r\n};\r\n\r\nworker.onmessage = function (event) {\r\n    window.alert(event.data);\r\n};\r\n\r\nlet player = new Player();\r\nplayer.staminaLevel = 70;\r\nplayer.intelligenceLevel = 67;\r\nplayer.attackLevel = 72;\r\nplayer.powerLevel = 70;\r\nplayer.defenseLevel = 70;\r\nplayer.equipment[\"/equipment_types/helm\"] = new Equipment(\"/items/crimson_helmet\", 3);\r\nplayer.equipment[\"/equipment_types/body\"] = new Equipment(\"/items/crimson_plate_body\", 3);\r\nplayer.equipment[\"/equipment_types/legs\"] = new Equipment(\"/items/crimson_plate_legs\", 3);\r\nplayer.equipment[\"/equipment_types/feet\"] = new Equipment(\"/items/crimson_boots\", 3);\r\nplayer.equipment[\"/equipment_types/hands\"] = new Equipment(\"/items/pincer_gloves\", 0);\r\nplayer.equipment[\"/equipment_types/main_hand\"] = new Equipment(\"/items/crimson_spear\", 3);\r\nplayer.equipment[\"/equipment_types/off_hand\"] = new Equipment(\"/items/azure_buckler\", 0);\r\nplayer.equipment[\"/equipment_types/pouch\"] = new Equipment(\"/items/large_pouch\", 0);\r\n\r\nplayer.updateCombatStats();\r\nconsole.log(\"Player:\", player);\r\n\r\nlet monster = new Monster(\"/combat_monsters/alligator\");\r\nmonster.updateCombatStats();\r\nconsole.log(\"Monster:\", monster);\r\n\r\nlet buff = new Buff(abilityDetailMap[\"/abilities/vampirism\"].abilityEffects[0].buff, 9);\r\n// let buff = new Buff(itemDetailMap[\"/items/super_power_coffee\"].consumableDetail.buffs[0]);\r\n\r\nconsole.log(\"Buff:\", buff);\r\n\r\nlet currentTime = 1000000000;\r\nlet stats = {};\r\n\r\nObject.entries(player.combatStats).forEach(([key, value]) => {\r\n    stats[key] = [value];\r\n});\r\n\r\nplayer.addBuff(buff, currentTime);\r\nObject.entries(player.combatStats).forEach(([key, value]) => {\r\n    stats[key].push(value);\r\n});\r\n\r\nplayer.removeExpiredBuffs(currentTime + buff.duration);\r\nObject.entries(player.combatStats).forEach(([key, value]) => {\r\n    stats[key].push(value);\r\n});\r\n\r\nconsole.table(stats);\r\n\r\nplayer.reset();\r\nplayer.addBuff(buff, currentTime);\r\n\r\nlet monster2 = new Monster(\"/combat_monsters/swampy\");\r\nlet monster3 = new Monster(\"/combat_monsters/snake\");\r\nmonster.reset();\r\nmonster2.reset();\r\nmonster3.reset();\r\nmonster2.combatStats.currentHitpoints -= 100;\r\nmonster3.combatStats.currentHitpoints -= 100;\r\n\r\nlet trigger = new Trigger(\r\n    \"/combat_trigger_dependencies/self\",\r\n    \"/combat_trigger_conditions/missing_hp\",\r\n    \"/combat_trigger_comparators/greater_than_equal\",\r\n    200\r\n);\r\nconsole.log(trigger.isActive(player, monster, [player], [monster, monster2, monster3]));\r\n\r\nlet ability1 = new Ability(\"/abilities/poke\", 13);\r\nlet ability2 = new Ability(\"/abilities/berserk\", 7, [trigger]);\r\nconsole.log(ability1);\r\nconsole.log(ability2);\r\n\r\nlet consumable1 = new Consumable(\"/items/stamina_coffee\");\r\nlet consumable2 = new Consumable(\"/items/marsberry_cake\", [trigger]);\r\nlet consumable3 = new Consumable(\"/items/plum_yogurt\");\r\nlet consumable4 = new Consumable(\"/items/attack_coffee\");\r\n\r\nconsole.log(consumable1);\r\nconsole.log(consumable2);\r\nconsole.log(consumable3);\r\n\r\nlet zone = new Zone(\"/actions/combat/bear_with_it\");\r\nconsole.log(zone);\r\n\r\nlet counts = {};\r\nlet iterations = 100000;\r\nfor (let i = 0; i < iterations; i++) {\r\n    let encounter = zone.getRandomEncounter();\r\n    let encounterString = encounter.map((monster) => monster.hrid).join(\" \");\r\n\r\n    if (!counts[encounterString]) {\r\n        counts[encounterString] = 0;\r\n    }\r\n\r\n    counts[encounterString] += 1;\r\n}\r\n\r\nfor (const [key, value] of Object.entries(counts)) {\r\n    console.log(key, value / iterations);\r\n}\r\n\r\nplayer.food[0] = consumable2;\r\nplayer.food[1] = consumable3;\r\nplayer.drinks[0] = consumable1;\r\nplayer.drinks[1] = consumable4;\r\n\r\nlet simulator = new CombatSimulator(player, zone);\r\nsimulator.simulate(600 * 1e9);\r\n"],"names":[],"sourceRoot":""}